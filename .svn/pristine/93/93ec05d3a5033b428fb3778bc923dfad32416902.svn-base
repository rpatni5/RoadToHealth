using RTH.Business.Objects;
using System;
using System.Collections.Concurrent;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Windows;
using System.Windows.Markup;
using System.Windows.Media;

namespace RTH.Windows.Views
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
        private Mutex _mutexInstance = null;

        private static void InitializeCultures(string lang = "en", string country = "US")
        {
            if (string.IsNullOrWhiteSpace(lang)) lang = "en";
            if (string.IsNullOrWhiteSpace(country)) lang = "US";

            var culture = string.Format("{0}-{1}", lang, country);

            Thread.CurrentThread.CurrentCulture = new CultureInfo(culture);
            Thread.CurrentThread.CurrentUICulture = new CultureInfo(culture);

            FrameworkElement.LanguageProperty.OverrideMetadata(typeof(FrameworkElement), new FrameworkPropertyMetadata(
                XmlLanguage.GetLanguage(CultureInfo.CurrentCulture.IetfLanguageTag)));
        }

        protected override void OnStartup(StartupEventArgs e)
        {
            bool createdNew;
            _mutexInstance = new Mutex(true, @"Global:RTH.Windows.Views", out createdNew);
            if (!createdNew)
            {
                _mutexInstance = null;
                Application.Current.Shutdown();
                return;
            }
            base.OnStartup(e);
            SetApplicationTheme();
        }

        protected override void OnExit(ExitEventArgs e)
        {
            if (_mutexInstance != null)
                _mutexInstance.ReleaseMutex();

            base.OnExit(e);
        }

        private void SetApplicationTheme()
        {
            ResourceDictionary theme = new ResourceDictionary
            {
                Source = new Uri(GetThemeSource(), UriKind.RelativeOrAbsolute)
            };
            int count = this.Resources.MergedDictionaries.Count;
            this.Resources.MergedDictionaries.RemoveAt(count - 1);
            Application.Current.Resources.MergedDictionaries.Add(theme);
        }

        private string GetThemeSource()
        {
            int themeNo;
            do
            {
                Random random = new Random();
                themeNo = random.Next(1, 5);
            } while (RTH.Windows.Views.Properties.Settings.Default.LastTheme == themeNo);
            RTH.Windows.Views.Properties.Settings.Default.LastTheme = themeNo;
            RTH.Windows.Views.Properties.Settings.Default.Save();
            return string.Format("/Resources/Themes/Theme{0}.xaml", themeNo);
        }

        public class SharedGlobals : INotifyPropertyChanged
        {
            public readonly String Language = "en";
            public event PropertyChangedEventHandler PropertyChanged;
            private Variable mLanguageResource = null;
            public MainWindow WindowMain { get; set; }

            public ConcurrentDictionary<string, ImageSource> DiseaseIcons { get; set; }
            public ConcurrentDictionary<string, ImageSource> DiseasePlainIcons { get; set; }

            public SharedGlobals()
            {
                DiseaseIcons = new ConcurrentDictionary<string, ImageSource>();
                DiseasePlainIcons = new ConcurrentDictionary<string, ImageSource>();
            }

            public Variable LanguageResource
            {
                get { return mLanguageResource; }
                set
                {
                    mLanguageResource = value;
                    var propChange = PropertyChanged;
                    if (propChange != null)
                    {
                        propChange.Invoke(null, new PropertyChangedEventArgs("LanguageResource"));
                    }
                }
            }
            public void SetLanguage(Variable language)
            {
                (from x in language.GetType().GetProperties() select x).ToList().ForEach(propInfo =>
                {
                    propInfo.SetValue(LanguageResource, propInfo.GetValue(language));
                });
            }
        }
        public static SharedGlobals SharedValues = new SharedGlobals();

        /*get Default En Variable */
        private void Application_DispatcherUnhandledException(object sender, System.Windows.Threading.DispatcherUnhandledExceptionEventArgs e)
        {
            e.Handled = true;
            MessageBox.Show(e.Exception.StackTrace, e.Exception.Message);
        }        
    }
}

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:conv="clr-namespace:RTH.Windows.Views.Converters"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <conv:TitleCaseConverter x:Key="titleCaseConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <SolidColorBrush x:Key="HeaderColorKey" Color="#FF1492B7" />
    <SolidColorBrush x:Key="ButtonBackground" Color="#FF1492B7"/>
    <SolidColorBrush x:Key="ButtonBackgroundText" Color="#fff"/>

    <!--<SolidColorBrush x:Key="ButtonLogin" Color="#FF00B1A4"></SolidColorBrush>
        <SolidColorBrush x:Key="ButtonLoginText" Color="#FFF"></SolidColorBrush>-->

    <SolidColorBrush x:Key="ButtonForgot" Color="#FFF"/>
    <SolidColorBrush x:Key="ButtonForgotBorder" Color="#FF00B1A4"/>
    <SolidColorBrush x:Key="ButtonForgotText" Color="#FF00B1A4"/>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="pack://application:,,,/Fonts/#Lato" />
    </Style>
    <Style TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="30"  />
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="Button_Login">
        <Setter Property="Background" Value="#FF1492B7" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Margin" Value="0 10 0 0" />
        <Setter Property="Height" Value="30"  />
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="ButtonLogin">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="#FF00B1A4" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Margin" Value="0,0,0,5" />
        <Setter Property="Height" Value="40"  />
        <Setter Property="FontSize" Value="18"/>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ButtonForgotPassword">
        <Setter Property="BorderBrush" Value="#FF00B1A4"/>
        <Setter Property="Background" Value="#fff" />
        <Setter Property="Foreground" Value="#FF00B1A4" />
        <Setter Property="Margin" Value="0 10 0 0" />
        <Setter Property="Padding" Value="30,0"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Height" Value="40"  />
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ButtonDashboardLogin">
        <Setter Property="Background" Value="#FF052321" />
        <Setter Property="Foreground" Value="#FFF" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Height" Value="50"  />
        <Setter Property="BorderThickness"  Value="0"  />
        <Setter Property="VerticalAlignment"  Value="Bottom"  />
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FF052321"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ButtonDashboardSignup">
        <Setter Property="Background" Value="#FF19B1A4" />
        <Setter Property="FontSize" Value="16"/>

        <Setter Property="Foreground" Value="#FFF" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Height" Value="50"  />
        <Setter Property="VerticalAlignment"  Value="Bottom"  />
        <Setter Property="BorderThickness"  Value="0"  />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FF19B1A4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>



    </Style>

    <Style TargetType="{x:Type Button}" x:Key="Buttonback">
        <Setter Property="Height" Value="30"   />
        <Setter Property="Width" Value="30"   />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Width="{TemplateBinding Width}">
                        <Grid.Background>
                            <ImageBrush ImageSource="/RTH.Windows.Views;component/Assets/ic_back.png"/>
                        </Grid.Background>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ButtonClosePopup">
        <Setter Property="Height" Value="20"   />
        <Setter Property="Width" Value="20"   />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Width="{TemplateBinding Width}">
                        <Grid.Background>
                            <ImageBrush ImageSource="/RTH.Windows.Views;component/Assets/cross_window_sml.png"/>
                        </Grid.Background>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="Buttonbackreverse">
        <Setter Property="Height" Value="30"   />
        <Setter Property="Width" Value="20"   />
        <Setter Property="Background" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Width="{TemplateBinding Width}">
                        <Grid.Background>
                            <ImageBrush ImageSource="/RTH.Windows.Views;component/Assets/ic_next.png"/>
                        </Grid.Background>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type PasswordBox}" x:Key="NewPassword">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="#000"/>
        <Setter Property="Background" Value="#ebebeb"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="BorderBrush" Value="#FF1492B7"/>
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="FontFamily" Value="Lato-Reg" />
        <Setter Property="FontSize" Value="11"/>

    </Style>

    <Style TargetType="{x:Type PasswordBox}" x:Key="LoginPassword">
        <Setter Property="Background" Value="#fff"  />
        <Setter Property="Height" Value="30"  />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="#000"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="5 0 5 15"/>
        <Setter Property="BorderThickness" Value="0 0 0 0"/>
        <Setter Property="BorderBrush" Value="#fff"/>
        <Setter Property="FontSize" Value=" 14"/>
        <Setter Property="FontStretch" Value="UltraExpanded"/>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="LoginText">
        <Setter Property="Background" Value="#fff"  />
        <Setter Property="Height" Value="30"  />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="#000"/>       
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Margin" Value="5,0"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="ForgotText">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="#000"/>
        <Setter Property="Background" Value="#ebebeb"/>

        <Setter Property="Height" Value="25"/>
        <Setter Property="BorderBrush" Value="#FF1492B7"/>
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="FontFamily" Value="Lato-Reg" />
        <Setter Property="FontSize" Value="11"/>

    </Style>

    <Style TargetType="{x:Type Label}" x:Key="SinginHelp">
        <Setter Property="Height" Value="30"  />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="#000"/>
        <Setter Property="FontFamily" Value="Lato-Reg" />
        <Setter Property="FontSize" Value="20"/>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="LabelText" >
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="DarkGray"/>
        <Setter Property="FontFamily" Value="Lato-Reg" />
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Margin" Value="0,6,0,0" /> 
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="OverviewLabelText" >
        <!--<Setter Property="FontWeight" Value="Bold" />-->
        <Setter Property="Foreground" Value="#000"/>
        <Setter Property="FontFamily" Value="Lato-Reg" />
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Margin" Value="0 0 0 0" />
        <Setter Property="Padding" Value="10" />
        <!--<Setter Property="Background" Value="{Binding tab_color}" />-->
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="OverviewTextBlock" >
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="#000"/>
        <Setter Property="FontFamily" Value="Lato-Reg" />
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="Margin" Value="20" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Background" Value="{Binding tab_color}" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style TargetType="{x:Type Image}" x:Key="HeaderOffImages" >
        <Setter Property="Source" Value="/RTH.Windows.Views;component/Assets/ic_off_page_header.png" />
        <Setter Property="Height" Value="65"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>
    <Style TargetType="{x:Type Image}" x:Key="SplashQueue" >
        <Setter Property="Source" Value="/RTH.Windows.Views;component/Assets/ic_splash_text.png" />
        <Setter Property="Height" Value="50"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>
    <Style TargetType="{x:Type Label}" x:Key="LabelHeaderOffText" >
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#fff"/>
        <Setter Property="FontFamily" Value="Lato-Reg" />
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="Margin" Value="0 20 0 0"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>


    </Style>

    <Style TargetType="{x:Type Label}" x:Key="LabelLogInText" >
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#000"/>
        <Setter Property="FontFamily" Value="Lato-Reg" />
        <Setter Property="FontSize" Value="13.333"/>
        <Setter Property="FontStyle" Value="Normal"/>

        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>
    <Style TargetType="{x:Type Label}" x:Key="RegisterText" >
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="#000"/>
        <Setter Property="FontFamily" Value="Lato-Reg" />
        <Setter Property="FontSize" Value="11.333"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="Margin" Value="0 0 0 0"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style TargetType="{x:Type Label}" x:Key="ErrorMessage" >
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Foreground" Value="#FFE8511F"/>     
        <Setter Property="FontSize" Value="14"/>      
        <Setter Property="Foreground" Value="Red"/>
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="ButtonFacebook">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="#3b5b97" />
        <Setter Property="Foreground" Value="#fff" />
        <Setter Property="Cursor" Value="Hand" />
        <!--<Setter Property="FontWeight" Value="Bold" />-->
        <Setter Property="Margin" Value="0" />
        <Setter Property="Height" Value="45"  />
        <Setter Property="FontSize" Value="18"/>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ButtonTwiter">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="#66c7ed" />
        <Setter Property="Foreground" Value="#fff" />
        <Setter Property="Cursor" Value="Hand" />
        <!--<Setter Property="FontWeight" Value="Bold" />-->
        <Setter Property="Margin" Value="0" />
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Height" Value="45"  />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="RegistrationMessage" >
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Foreground" Value="#aaa"/>
        <!--<Setter Property="FontFamily" Value="Lato-Reg" />-->
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="Margin" Value="5 10 5 5"/>
        <Setter Property="FontWeight" Value="Medium"/>

    </Style>

    <Style TargetType="{x:Type ComboBox}" x:Key="RegistrationComboBox">
        <Setter Property="Background" Value="#fff" />
        <Setter Property="BorderBrush" Value="#fff" />
        <Setter Property="Height" Value="30" />
        <Setter Property="BorderBrush" Value="#fff" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="Lato-Reg" />
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="Margin" Value="5 10 5 5"/>
        <Setter Property="FontWeight" Value="Medium"/>
    </Style>
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="RadioButton.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="RadioButton.Static.Border" Color="#FF707070"/>
    <SolidColorBrush x:Key="CheckBox.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="CheckBox.Static.Border" Color="#FF707070"/>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Background" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="#FF212121"/>


    <SolidColorBrush x:Key="CheckBox.MouseOver.Background" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="CheckBox.MouseOver.Border" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="CheckBox.MouseOver.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="CheckBox.Disabled.Background" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="CheckBox.Disabled.Border" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="CheckBox.Disabled.Glyph" Color="#FF707070"/>
    <SolidColorBrush x:Key="CheckBox.Pressed.Background" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="CheckBox.Pressed.Border" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="CheckBox.Pressed.Glyph" Color="#FF212121"/>
    <SolidColorBrush x:Key="CheckBox.Static.Glyph" Color="#FF212121"/>

    <Style x:Key="QuestionnaireRadioButtonTemplate" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{StaticResource RadioButton.Static.Glyph}" MinWidth="6" MinHeight="6" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="0" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Image x:Name="___RTH_Windows_Views_component_Assets_check_blue_sml_png" HorizontalAlignment="Stretch" Margin="5" Source="/RTH.Windows.Views;component/Assets/check-blue-sml.png" Stretch="Uniform" Width="Auto" Grid.Column="1" Visibility="{Binding IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.MouseOver.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Disabled.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionSelectorRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="radioButtonBorder" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <ContentControl 
                                    x:Name="contentPresenter"
                                    Grid.Column="1" 
                                    Focusable="False" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    Margin="{TemplateBinding Padding}" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Label x:Name="label" 
                                    HorizontalAlignment="Stretch" 
                                    HorizontalContentAlignment="Center" 
                                    VerticalAlignment="Stretch" 
                                    VerticalContentAlignment="Center" 
                                    Foreground="{TemplateBinding Foreground}" 
                                    Content="{TemplateBinding Content}"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    FontSize="{TemplateBinding FontSize}"
                                    FontStyle="{TemplateBinding FontStyle}"
                                    FontWeight="{TemplateBinding FontWeight}"/>
                            </ContentControl>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter Property="Foreground" TargetName="label" Value="{DynamicResource RadioButton.Static.Background}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.MouseOver.Background}"/>
                            <Setter Property="Foreground" TargetName="label" Value="{DynamicResource RadioButton.Static.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Disabled.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{StaticResource RadioButton.Static.Glyph}"/>
                            <!--<Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionSelectorCheckboxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource CheckBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckBox.Static.Border}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="CheckBoxBorder" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <ContentControl 
                                    x:Name="contentPresenter"
                                    Grid.Column="1" 
                                    Focusable="False" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    Margin="{TemplateBinding Padding}" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Label x:Name="label" 
                                    HorizontalAlignment="Stretch" 
                                    HorizontalContentAlignment="Center" 
                                    VerticalAlignment="Stretch" 
                                    VerticalContentAlignment="Center" 
                                    Foreground="{TemplateBinding Foreground}" 
                                    Content="{TemplateBinding Content}"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    FontSize="{TemplateBinding FontSize}"
                                    FontStyle="{TemplateBinding FontStyle}"
                                    FontWeight="{TemplateBinding FontWeight}"/>
                            </ContentControl>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="CheckBoxBorder" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Setter Property="Foreground" TargetName="label" Value="{DynamicResource RadioButton.Static.Background}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="CheckBoxBorder" Value="{DynamicResource RadioButton.MouseOver.Background}"/>
                            <Setter Property="Foreground" TargetName="label" Value="{DynamicResource CheckBox.Static.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.Disabled.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Background" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.Static.Glyph}"/>
                            <!--<Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="QuestionnaireCheckBoxTemplate" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource CheckBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckBox.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="CheckBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{StaticResource RadioButton.Static.Glyph}" MinWidth="6" MinHeight="6" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="0" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Image x:Name="___RTH_Windows_Views_component_Assets_check_blue_sml_png" HorizontalAlignment="Stretch" Margin="5" Source="/RTH.Windows.Views;component/Assets/check-blue-sml.png" Stretch="Uniform" Width="Auto" Grid.Column="1" Visibility="{Binding IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.MouseOver.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource RadioButton.Disabled.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="CheckBoxBorder" Value="{StaticResource CheckBox.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource CheckBox.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}"
           x:Key="toggleButtonStyle">
        <Setter Property="Margin" Value="0 10 0 0" />
        <Setter Property="Height" Value="25"  />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="FontWeight" Value="Normal" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Content" Value="OFF" />
                <Setter Property="BorderBrush" Value="White" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="FontWeight" Value="Normal" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Content" Value="ON" />
                <Setter Property="BorderBrush" Value="White" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="FontWeight" Value="Normal" />
            </Trigger>
            
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>
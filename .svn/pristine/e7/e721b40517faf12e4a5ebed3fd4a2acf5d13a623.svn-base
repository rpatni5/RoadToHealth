using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Windows.Media;

namespace RTH.Helpers
{
    public static class ExtensionMethod
    {
        public static string ToPascal(this string parm)
        {
            return CultureInfo.InvariantCulture.TextInfo.ToTitleCase(parm.ToLowerInvariant());
        }

        public static T ToChangeType<T>(this object variable) where T : IConvertible
        {
            try
            {
                return variable != null ? (T)Convert.ChangeType(variable, typeof(T)) : default(T);
            }
            catch (InvalidCastException ex)
            {
                return default(T);
            }
            catch (FormatException ex)
            {
                return default(T);
            }
        }

        public static T GetPropValue<T>(this Object obj, String name)
        {
            Object retval = obj.GetPropValue(name);
            if (retval == null) { return default(T); }

            // throws InvalidCastException if types are incompatible
            return (T)retval;
        }
        public static object GetPropValue(this object obj, string property)
        {
            try
            { 
            return obj.GetType().GetProperty(property).GetValue(obj, null);
            }
            catch
            {
                return null;
            }
        }
        public static bool ValidateEmail(string email)
        {
            string expresion;
            expresion = "\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*";
            if (Regex.IsMatch(email, expresion))
            {
                if (Regex.Replace(email, expresion, string.Empty).Length == 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        private static Regex colorReg = new Regex("^#(?:[0-9a-fA-F]{3}){1,2}$", RegexOptions.IgnoreCase);
        //public static Color ToColorString(this string color)
        //{
        //    if (colorReg.IsMatch(color))
        //    {
        //        Match m = colorReg.Match(color);
        //    }

        //    return new Color();
        //}

        public static SolidColorBrush ToSolidColorBrush(this string colorString)
        {
            return new SolidColorBrush(colorString.ToColorString());
        }
        public static Color ToColorString(this string colorString)
        {
            colorString = ExtractHexDigits(colorString);

            if (string.IsNullOrEmpty(colorString)) throw new ArgumentNullException("Please provide a valid color string");

            Color color = Colors.White;

            if (colorString.Length == 6)
            {
                var r = colorString.Substring(0, 2);
                var g = colorString.Substring(2, 2);
                var b = colorString.Substring(4, 2);

                try
                {
                    byte rc = Byte.Parse(r, NumberStyles.HexNumber);
                    byte gc = Byte.Parse(g, NumberStyles.HexNumber);
                    byte bc = Byte.Parse(b, NumberStyles.HexNumber);
                    color = Color.FromRgb(rc, gc, bc);
                }
                catch (Exception)
                {
                    return Colors.White;
                    throw;
                }
            }
            if (colorString.Length == 8)
            {
                var a = colorString.Substring(0, 2);
                var r = colorString.Substring(2, 2);
                var g = colorString.Substring(4, 2);
                var b = colorString.Substring(6, 2);

                try
                {
                    byte ac = Byte.Parse(a, NumberStyles.HexNumber);
                    byte rc = Byte.Parse(r, NumberStyles.HexNumber);
                    byte gc = Byte.Parse(g, NumberStyles.HexNumber);
                    byte bc = Byte.Parse(b, NumberStyles.HexNumber);
                    color = Color.FromArgb(ac, rc, gc, bc);
                }
                catch (Exception)
                {
                    return Colors.White;
                    throw;
                }
            }
            return color;
        }

        /// <summary>
        /// Extracts the hex digits from the string.
        /// </summary>
        /// <param name="colorString">The color string.</param>
        /// <returns></returns>
        private static string ExtractHexDigits(string colorString)
        {
            Regex HexDigits = new Regex(@"[abcdefABCDEF\d]+", RegexOptions.Compiled);

            var hexnum = new StringBuilder();
            foreach (char c in colorString)
                if (HexDigits.IsMatch(c.ToString()))
                    hexnum.Append(c.ToString());

            return hexnum.ToString();
        }

    }
}

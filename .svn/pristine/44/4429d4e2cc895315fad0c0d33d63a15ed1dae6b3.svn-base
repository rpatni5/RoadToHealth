using RTH.Business.Objects;
using RTH.Helpers.Exceptions;
using RTH.Windows.Views.Controls;
using RTH.Windows.Views.Helpers;
using System;
using System.Collections.Concurrent;
using System.ComponentModel;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Windows;
using System.Windows.Media;

namespace RTH.Windows.Views
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
        SingleInstanceHelper instanceHelper;

        protected override void OnActivated(EventArgs e)
        {
            base.OnActivated(e);
            var window = App.SharedValues.WindowMain;
            if (window != null && !App.SharedValues.IsHooked)
            {
                instanceHelper.SetHook(window);
            }
        }

        protected override void OnStartup(StartupEventArgs e)
        {
            instanceHelper = new SingleInstanceHelper();
            if (instanceHelper.Register())
            {
                Application.Current.MainWindow = null;
                base.OnStartup(e);
                SetApplicationTheme();
            }
            System.Net.NetworkInformation.NetworkChange.NetworkAvailabilityChanged += NetworkChange_NetworkAvailabilityChanged;
        }

        private void NetworkChange_NetworkAvailabilityChanged(object sender, System.Net.NetworkInformation.NetworkAvailabilityEventArgs e)
        {
            //ShowErrorInformation();
            ShowInfoIfNetUnavailable(e.IsAvailable);
        }

        public static bool ShowInfoIfNetUnavailable(bool available)
        {
            if (!available)
            {
                MessageBoxResult result = QuealthMessageBox.ShowInformation("You are not connected to the internet. Quealth will work offline. If you choose to continue offline, features that require internet connection will be disabled. Do you agree to continue offline?", showCancel: true);
                if (result == MessageBoxResult.Cancel)
                {
                    App.Current.Shutdown();
                }
            }
            return true;
        }

        private void ShowErrorInformation()
        {
            if (!IsOnline())
            {
                MessageBoxResult result = QuealthMessageBox.ShowException(App.SharedValues.WindowMain,
                 "You don't appear to be connected to the internet, please check your connection and try again.", "", showCancel: true);
                ViewModels.Common.GlobalData.Default.LoaderVisibility = false;
                if (result == MessageBoxResult.Yes)
                {
                    if (App.SharedValues.WindowMain != null)
                    {
                        Dispatcher.Invoke(() => { App.SharedValues.WindowMain.Focus(); });
                    }
                    ShowErrorInformation();
                }
                else
                {
                    Dispatcher.BeginInvoke((Action)(() =>
                    {
                        this.Shutdown();
                    }));

                }
                return;
            }

        }

        public static bool IsOnline()
        {
            try
            {
                IPHostEntry dummy = Dns.GetHostEntry("www.google.com"); //using System.Net;
                return true;
            }
            catch (SocketException)
            {
                return false;
            }
        }
        protected override void OnExit(ExitEventArgs e)
        {
            instanceHelper.Dispose();
            base.OnExit(e);
        }

        private void SetApplicationTheme()
        {
            ResourceDictionary theme = new ResourceDictionary
            {
                Source = new Uri(GetThemeSource(), UriKind.RelativeOrAbsolute)
            };
            int count = this.Resources.MergedDictionaries.Count;
            this.Resources.MergedDictionaries.RemoveAt(count - 1);
            Application.Current.Resources.MergedDictionaries.Add(theme);
        }

        private string GetThemeSource()
        {
            int themeNo;
            do
            {
                Random random = new Random();
                themeNo = random.Next(1, 5);
            } while (RTH.Windows.Views.Properties.Settings.Default.LastTheme == themeNo);
            RTH.Windows.Views.Properties.Settings.Default.LastTheme = themeNo;
            RTH.Windows.Views.Properties.Settings.Default.Save();
            return string.Format("/Resources/Themes/Theme{0}.xaml", themeNo);
        }

        public class SharedGlobals : INotifyPropertyChanged
        {
            public readonly String Language = "en";
            public event PropertyChangedEventHandler PropertyChanged;
            private Variable mLanguageResource = null;
            public MainWindow WindowMain { get; set; }
            public bool IsHooked { get; set; }

            public ConcurrentDictionary<string, ImageSource> DiseaseIcons { get; set; }
            public ConcurrentDictionary<string, ImageSource> DiseasePlainIcons { get; set; }

            public SharedGlobals()
            {
                DiseaseIcons = new ConcurrentDictionary<string, ImageSource>();
                DiseasePlainIcons = new ConcurrentDictionary<string, ImageSource>();
            }

            public Variable LanguageResource
            {
                get { return mLanguageResource; }
                set
                {
                    mLanguageResource = value;
                    var propChange = PropertyChanged;
                    if (propChange != null)
                    {
                        propChange.Invoke(null, new PropertyChangedEventArgs("LanguageResource"));
                    }
                }
            }
            public void SetLanguage(Variable language)
            {
                (from x in language.GetType().GetProperties() select x).ToList().ForEach(propInfo =>
                {
                    propInfo.SetValue(LanguageResource, propInfo.GetValue(language));
                });
            }
        }
        public static SharedGlobals SharedValues = new SharedGlobals();

        /*get Default En Variable */
        private void Application_DispatcherUnhandledException(object sender, System.Windows.Threading.DispatcherUnhandledExceptionEventArgs e)
        {
            e.Handled = true;
            ErrorLog.WriteErrorLog(e.Exception);
            if (App.SharedValues.WindowMain != null)
            {
                if (e.Exception.GetType() == typeof(CachedObjectNotFoundException))
                {
                    QuealthMessageBox.ShowError(e.Exception, e.Exception.Message);
                    ViewModels.Common.GlobalData.Default.LoaderVisibility = false;
                    App.SharedValues.WindowMain.LoadView(Enums.ViewEnum.DashboardView);
                    return;
                }
            }
            else if (SharedValues.WindowMain == null)
            {
                QuealthMessageBox.ShowError(e.Exception, e.Exception.Message);
                ViewModels.Common.GlobalData.Default.LoaderVisibility = false;
                return;
            }
            QuealthMessageBox.ShowError(e.Exception, e.Exception.Message);
            ViewModels.Common.GlobalData.Default.LoaderVisibility = false;
        }



        [STAThread]
        public static void Main(string[] args)
        {

            App app = new App();
            app.InitializeComponent();
            app.Run();
        }
    }
}

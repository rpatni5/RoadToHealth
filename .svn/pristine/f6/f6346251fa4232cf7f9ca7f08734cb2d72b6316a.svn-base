using RTH.Helpers.Messaging;
using RTH.Windows.ViewModels.Common;
using RTH.Windows.Views.Enums;
using RTH.Windows.Views.Objects;
using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;


namespace RTH.Windows.Views.UserControls
{
    public class ViewBase : UserControl, IMessagingTarget
    {
        public bool ShowTutorial
        {
            get { return (bool)GetValue(ShowTutorialProperty); }
            set { SetValue(ShowTutorialProperty, value); }
        }

        public static readonly DependencyProperty ShowTutorialProperty =
            DependencyProperty.Register("ShowTutorial", typeof(bool), typeof(ViewBase), new PropertyMetadata(false));

        public ViewModelBase ViewModel { get; protected set; }
        public ViewBase()
        {
            Token = Guid.NewGuid();
            this.Loaded += ViewBase_Loaded;
            this.Unloaded += ViewBase_Unloaded;
            this.LoadViewModel();
        }

        public virtual void LoadViewModel()
        {
            if (this.ViewModel != null)
            {
                this.ViewModel.ViewToken = this.Token;
            }
            this.DataContext = this.ViewModel;
        }

        public virtual bool CanUnload()
        {
            return true;
        }
        public virtual TutorialContent GetTutorials()
        {
            return null;
        }

        public virtual void OnMessage(Message e)
        {
            if (e.Type == MessageType.Message)
            {
                RTH.Windows.Views.Controls.QuealthMessageBox.ShowInformation(e.Data as String);
            }
            else if (e.Type == MessageType.LoadView)
            {
                ViewEnum ve = (ViewEnum)Enum.Parse(typeof(ViewEnum), e.Data as string);
                App.SharedValues.WindowMain.LoadView(ve);
            }
            else if (e.Type == MessageType.ExecuteBack)
            {
                App.SharedValues.WindowMain.BackCommand.Execute(null);
            }
        }

        #region properties
        public Guid Token { get; private set; }

        #endregion properties
        private void ViewBase_Loaded(object sender, System.Windows.RoutedEventArgs e)
        {
            if (DesignerProperties.GetIsInDesignMode(this) == false)
            {
                AppMessages.Register(this, this.Token);
            }
            this.OnViewLoaded();
        }
        public virtual void OnViewLoaded()
        {
            
        }
        private void ViewBase_Unloaded(object sender, System.Windows.RoutedEventArgs e)
        {
            if (DesignerProperties.GetIsInDesignMode(this) == false)
            {
                AppMessages.Unregister(this.Token);
            }
        }
        public void ReceiveMessage(Message msg)
        {
            Dispatcher.BeginInvoke((Action)(() => { this.OnMessage(msg); }));
        }
    }
}

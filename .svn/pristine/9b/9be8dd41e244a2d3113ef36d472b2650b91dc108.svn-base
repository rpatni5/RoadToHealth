using RTH.Business.Objects.JSON;
using RTH.Windows.ViewModels.Common;
using RTH.Windows.ViewModels.Objects;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Threading;

namespace RTH.Windows.ViewModels
{
    public class FriendsOfQViewModel : ViewModelBase
    {
        #region GlobalProperties
        public FriendsOfQ QFriends
        {
            get { return GetValue(() => this.QFriends); }
            set { SetValue(() => QFriends, value); }
        }
        public List<ProductData> FeatureProduct
        {
            get { return GetValue(() => this.FeatureProduct); }
            set { SetValue(() => this.FeatureProduct, value); }
        }
        public int TotalFeatureProduct
        {
            get { return GetValue(() => this.TotalFeatureProduct); }
            set { SetValue(() => this.TotalFeatureProduct, value); }
        }
        public List<ProductInfo> NonFeatureProduct
        {
            get { return GetValue(() => this.NonFeatureProduct); }
            set { SetValue(() => this.NonFeatureProduct, value); }
        }
        #endregion

        public FriendsOfQViewModel()
        {
            GlobalData.Default.HeaderVisibility = System.Windows.Visibility.Collapsed;
            Init();
        }
        private  void Init()
        {
            AsyncCall.Invoke(() =>
            {
                QFriends = GetFriendsOfQ(ViewModelBase.UserDetails._id, ViewModelBase.UserDetails.AuthToken.access_token);
                QFriends.data.ForEach(c =>
                {
                    c.DiseaseIcons = SetDiseaseIcons(c.diseases);
                });
                SetAllProducts();
                SetFeatureProduct();
            });
        }

        private void SetFeatureProduct()
        {
            Parallel.ForEach(QFriends.data, c =>
             {
                 Application.Current.Dispatcher.Invoke(delegate
                 {
                     c.MainImagePath = SaveImage(c.MainImage);
                 }, DispatcherPriority.Render);
             });
            FeatureProduct = QFriends.data.Where(x => x.featured == true).ToList();
            TotalFeatureProduct = FeatureProduct.Count - 1;
        }
        private BitmapImage SaveImage(string imageSource)
        {
            BitmapImage bitmap = new BitmapImage();
            bitmap.BeginInit();
            bitmap.UriSource = new Uri(imageSource, UriKind.Absolute);
            bitmap.EndInit();
            return bitmap;
        }
        private String GetDestinationPath(string folderName, string filename)
        {
            String appStartPath = System.IO.Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName) + folderName;
            if (!System.IO.Directory.Exists(appStartPath))
                System.IO.Directory.CreateDirectory(appStartPath);

            appStartPath = String.Format("{0}\\{1}", appStartPath, filename);
            return appStartPath;
        }
        public FriendsOfQ GetFriendsOfQ(string id, string authToken)
        {
            return RTH.Business.Services.FriendsOfQService.GetFriendsOfQ(id, authToken);
        }
        public void SetAllProducts()
        {
            if (GlobalData.Default.Products == null)
            {
                List<ProductInfo> lstProducts = new List<ProductInfo>();
                lstProducts.Add(new ProductInfo() { ID = "", Name = "All Categories", IsChecked = true, Products = QFriends.data, ProductImage = string.Format("/RTH.Windows.Views;component/Assets/ic_product_cat.png") });
                var product = QFriends.data.GroupBy(x => x.product_type._id).ToList();
                foreach (var item in product)
                {
                    ProductInfo productInfo = new ProductInfo();
                    productInfo.ID = item.Key;
                    productInfo.Name = item.FirstOrDefault().product_type.name;
                    productInfo.IsChecked = true;
                    productInfo.ProductImage = item.FirstOrDefault().product_type.ProductImage;

                    List<ProductData> productData = new List<ProductData>();
                    foreach (var i in item)
                    {
                        productData.Add(i);
                    }
                    productInfo.Products = productData;
                    lstProducts.Add(productInfo);
                }
                GlobalData.Default.Products = lstProducts;
                NonFeatureProduct = GlobalData.Default.Products;
            }
            else
            {
                List<ProductInfo> lstProducts = new List<ProductInfo>();

                if (GlobalData.Default.Products.Any(x => x.ID == "" && x.IsChecked == true))
                {
                    NonFeatureProduct = GlobalData.Default.Products;
                }
                else
                {
                    List<ProductData> lstProductData = new List<ProductData>();
                    GlobalData.Default.Products.Where(x => x.IsChecked == true).ToList().ForEach(c =>
                    {
                        c.Products.ForEach(i =>
                        {
                            lstProductData.Add(i);
                        });
                    });
                    lstProducts.Add(new ProductInfo() { ID = "", Name = "All Categories", IsChecked = true, Products = lstProductData, ProductImage = string.Format("/RTH.Windows.Views;component/Assets/ic_product_cat.png") });

                    GlobalData.Default.Products.Where(x => x.IsChecked == true).ToList().ForEach(item =>
                    {
                        ProductInfo productInfo = new ProductInfo();
                        productInfo.ID = item.ID;
                        productInfo.Name = item.Name;
                        productInfo.IsChecked = true;
                        productInfo.ProductImage = item.ProductImage;
                        productInfo.Products = item.Products;
                        lstProducts.Add(productInfo);
                    });
                    NonFeatureProduct = lstProducts;
                }
            }

        }
        private Dictionary<string, bool> SetDiseaseIcons(List<string> DiseasesIcon)
        {
            Business.Objects.Questionnaires QuestionnaireData = RTH.Business.Services.DashboardService.GetQuestionaires(ConfigurationManagers.ClientId, "en");
            Dictionary<string, bool> diseaseIcons = new Dictionary<string, bool>();
            QuestionnaireData.data.ForEach(c =>
            {
                diseaseIcons.Add(c.key_string, DiseasesIcon.Any(x => x == c._id) ? true : false);
            });
            return diseaseIcons;
        }
    }
}

using RTH.Windows.ViewModels.Common;
using System.Collections.Generic;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System;

namespace RTH.Windows.Views.Controls
{
    /// <summary>
    /// Interaction logic for ChatControl.xaml
    /// </summary>
    public partial class ChatControl : UserControl
    {
        public ChatControl()
        {
            InitializeComponent();
            this.Loaded += HRAControl_Loaded;
        }

        private void HRAControl_Loaded(object sender, RoutedEventArgs e)
        {
            Suggestion();
        }

        public List<string> ChatList
        {
            get { return (List<string>)GetValue(ChatListProperty); }
            set { SetValue(ChatListProperty, value); }
        }

        // Using a DependencyProperty as the backing store for ChatList.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty ChatListProperty =
            DependencyProperty.Register("ChatList", typeof(List<string>), typeof(ChatControl), new PropertyMetadata(null));

        
        private async void Suggestion()
        {
            coachControl.Children.Clear();
           
            foreach (var c in ChatList)
            {
                await AsyncCall.Invoke(() =>
                {
                    Thread.Sleep(1500);
                    Dispatcher.Invoke(() =>
                    {
                        charScroll.ScrollToBottom();
                        coachControl.Children.Add(new TextBlock()
                        {
                            Text = c,
                            FontSize = 14.0,
                            Foreground = Brushes.Gray,
                            Margin = new Thickness(20, 0, 20, 20),
                            Background = (SolidColorBrush)(new BrushConverter().ConvertFrom("#e6e6e6")),
                            Padding = new Thickness(20, 10, 20, 10),
                            TextWrapping = TextWrapping.Wrap,
                        });
                    });
                    Thread.Sleep(1000);

                    return true;
                }, false);
            }

            viewTyping.Visibility = Visibility.Collapsed;
        }

    }
}

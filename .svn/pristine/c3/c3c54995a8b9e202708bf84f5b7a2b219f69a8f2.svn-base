using System.Windows;
using RTH.Windows.ViewModels;
using System;
using RTH.Windows.ViewModels.Common;
using RTH.Windows.Views.Objects;
using RTH.Windows.Views.Helpers;
using System.Collections.Generic;
using System.Threading;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Collections;

namespace RTH.Windows.Views.UserControls
{
    /// <summary>
    /// Interaction logic for HealthAreas.xaml
    /// </summary>
    public partial class HealthAreasView : ViewBase, ITutorialHost
    {
        public HealthAreasView()
        {
            InitializeComponent();
            Loaded += HealthAreasView_Loaded;
        }

        private void HealthAreasView_Loaded(object sender, RoutedEventArgs e)
        {
            if (!ViewModel.IsLoaded)
            {
                gridHealthAdvice.Visibility = Visibility.Collapsed;
                ViewModel.Loaded += OnViewModelLoaded;
            }
            else
            {
                if (HasShowTutorials())
                {
                    this.SetValue(ShowTutorialProperty, true);
                }
            }
            btnExpand.IsVisibleChanged += BtnExpand_IsVisibleChanged;
            btnFOQ.IsVisibleChanged += BtnFOQ_IsVisibleChanged;
        }


        private void BtnFOQ_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if ((bool)e.NewValue)
            {
                AsyncCall.Invoke(() =>
                {
                    Thread.Sleep(200);
                    if (HasShowTutorials() && !string.IsNullOrEmpty((this.ViewModel as HealthAreasViewModel).CurrentHealthArea.detail))
                    {
                        AddTutorialToList(TutorialHelper.FOQIcon, sender as Button);
                        Dispatcher.Invoke(() =>
                        {
                            this.SetValue(ShowTutorialProperty, true);
                        });
                    }
                });
            }
        }

        private void BtnExpand_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if ((bool)e.NewValue)
            {
                AsyncCall.Invoke(() =>
                {
                    Thread.Sleep(100);
                    if (HasShowTutorials() && !string.IsNullOrEmpty((this.ViewModel as HealthAreasViewModel).CurrentHealthArea.detail))
                    {                       
                        AddTutorialToList(TutorialHelper.ExpendIcon, sender as ToggleButton);
                        Dispatcher.Invoke(() =>
                        {
                            Thread.Sleep(101);
                            this.SetValue(ShowTutorialProperty, true);
                        });
                    }
                });
            }
        }

        public override void LoadViewModel()
        {
            this.ViewModel = ViewModelLocator.Get<HealthAreasViewModel>(refreshRequired: true);
            this.RefreshOnLoad = true;

            base.LoadViewModel();
        }

        private void OnViewModelLoaded(object sender)
        {
            Dispatcher.BeginInvoke((Action)(() =>
            {
                gridHealthAdvice.Visibility = Visibility.Visible;
                new Thread(new ThreadStart((Action)(() =>
                {
                    Thread.Sleep(100);
                    Dispatcher.BeginInvoke((Action)(() =>
                    {
                        if (HasShowTutorials())
                        {
                            this.SetValue(ShowTutorialProperty, true);
                        }
                    }));
                }))).Start();

            }));


        }

        #region Tutorials

        Dictionary<int, Tuple<string, FrameworkElement>> tutorialObjects;
        public void InitializeTutorials()
        {
            tutorialObjects = new Dictionary<int, Tuple<string, FrameworkElement>>();
            AddTutorialToList(TutorialHelper.ScoreTab, App.SharedValues.WindowMain.footerContainer.rdoLeft);
            //AddTutorialToList(TutorialHelper.OverviewIcon, gridOverview);           
            AddTutorialToList(TutorialHelper.PhaResultIcon, null);
        }
        public override void OnViewLoaded()
        {
            InitializeTutorials();
        }

        int currentTutIndex = 0;
        public override TutorialContent GetTutorials()
        {
            if (currentTutIndex >= this.MaxTutorials)
            {
                currentTutIndex = 0;
                tutorialObjects.Clear();
                ShowTutorial = false;
                return null;
            }
            var tuple = tutorialObjects[currentTutIndex++];
            if (tuple.Item1.ShowTutorial())
            {
                tuple.Item1.TutorialComplete();
                if (tuple.Item2 == null)
                {
                    var item = (itemsControlPHAResultScren2.ItemContainerGenerator.ContainerFromItem(itemsControlPHAResultScren2.Items[0]) as ContentPresenter);
                    return item.GetTutorial(this, tuple.Item1);
                }
                return tuple.Item2.GetTutorial(this, tuple.Item1);
            }
            ShowTutorial = false;
            return null;
        }
        public int MaxTutorials
        {
            get
            {
                return tutorialObjects.Count;
            }
        }

        public int GetTutorialIndex()
        {
            return currentTutIndex;
        }

        public string GetTutorialText(string keyString)
        {
            if (App.SharedValues.LanguageResource.GetType().GetProperty(keyString) != null)
            {
                return App.SharedValues.LanguageResource.GetType().GetProperty(keyString).GetValue(App.SharedValues.LanguageResource).ToString();
            }
            return string.Empty;
        }

        private bool HasShowTutorials()
        {            
            return Properties.Settings.Default.Tutorials;
        }
        private bool AddTutorialToList(string keyString, FrameworkElement element)
        {
            if (TutorialHelper.ShowTutorial(keyString))
            {
                tutorialObjects.Add(tutorialObjects.Count, new Tuple<string, FrameworkElement>(keyString, element));
                return true;
            }
            return false;
        }
        public override void SkipTutorials()
        {
            string[] keys = { TutorialHelper.ExpendIcon, TutorialHelper.FOQIcon, TutorialHelper.OverviewIcon, TutorialHelper.PhaResultIcon };

            TutorialHelper.SkipTutorials(keys);
            this.SetValue(ShowTutorialProperty, false);
        }
        #endregion Tutorials

    }
}

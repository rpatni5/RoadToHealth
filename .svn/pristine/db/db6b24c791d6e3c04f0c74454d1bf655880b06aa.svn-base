using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace RTH.Windows.Views.UserControls
{
    /// <summary>
    /// Interaction logic for HRAControl.xaml
    /// </summary>
    public partial class HRAControl : UserControl
    {
        public HRAControl()
        {
            InitializeComponent();
            this.hraView.DataContext = this;
        }

        public double Cancer
        {
            get { return (double)GetValue(CancerProperty); }
            set { SetValue(CancerProperty, value); }
        }
        public static readonly DependencyProperty CancerProperty =
            DependencyProperty.Register("Cancer", typeof(double), typeof(HRAControl), new PropertyMetadata(0.0));

        public double Diabetes
        {
            get { return (double)GetValue(DiabetesProperty); }
            set { SetValue(DiabetesProperty, value); }
        }
        public static readonly DependencyProperty DiabetesProperty =
            DependencyProperty.Register("Diabetes", typeof(double), typeof(HRAControl), new PropertyMetadata(0.0));

        public double Lungs
        {
            get { return (double)GetValue(LungsProperty); }
            set { SetValue(LungsProperty, value); }
        }
        public static readonly DependencyProperty LungsProperty =
            DependencyProperty.Register("Lungs", typeof(double), typeof(HRAControl), new PropertyMetadata(0.0));

        public double Cardio
        {
            get { return (double)GetValue(CardioProperty); }
            set { SetValue(CardioProperty, value); }
        }
        public static readonly DependencyProperty CardioProperty =
            DependencyProperty.Register("Cardio", typeof(double), typeof(HRAControl), new PropertyMetadata(0.0));

        public double Dementia
        {
            get { return (double)GetValue(DementiaProperty); }
            set { SetValue(DementiaProperty, value); }
        }
        public static readonly DependencyProperty DementiaProperty =
            DependencyProperty.Register("Dementia", typeof(double), typeof(HRAControl), new PropertyMetadata(0.0));

        public double TotalScore
        {
            get { return (double)GetValue(TotalScoreProperty); }
            set { SetValue(TotalScoreProperty, value); }
        }
        public static readonly DependencyProperty TotalScoreProperty =
            DependencyProperty.Register("TotalScore", typeof(double), typeof(HRAControl), new PropertyMetadata(0.0));



        public int TotalHRA
        {
            get { return (int)GetValue(TotalHRAProperty); }
            set { SetValue(TotalHRAProperty, value); }
        }

        // Using a DependencyProperty as the backing store for TotalHRA.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty TotalHRAProperty =
            DependencyProperty.Register("TotalHRA", typeof(int), typeof(HRAControl), new PropertyMetadata(0));




        public int SmallFontSize
        {
            get { return (int)GetValue(SmallFontSizeProperty); }
            set { SetValue(SmallFontSizeProperty, value); }
        }

        // Using a DependencyProperty as the backing store for SmallFontSize.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty SmallFontSizeProperty =
            DependencyProperty.Register("SmallFontSize", typeof(int), typeof(HRAControl), new PropertyMetadata(9));




    }
}

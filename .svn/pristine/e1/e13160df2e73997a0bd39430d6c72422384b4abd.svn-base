using RTH.Windows.ViewModels.Common;
using System.Collections.Generic;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System;

namespace RTH.Windows.Views.Controls
{
    /// <summary>
    /// Interaction logic for ChatControl.xaml
    /// </summary>
    public partial class ChatControl : UserControl
    {
        public ChatControl()
        {
            InitializeComponent();

            this.Loaded += HRAControl_Loaded;
        }

        private void HRAControl_Loaded(object sender, RoutedEventArgs e)
        {
            //Suggestion();
        }

        public List<string> ChatList
        {
            get { return (List<string>)GetValue(ChatListProperty); }
            set { SetValue(ChatListProperty, value); }
        }

        // Using a DependencyProperty as the backing store for ChatList.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty ChatListProperty =
            DependencyProperty.Register("ChatList", typeof(List<string>), typeof(ChatControl), new PropertyMetadata(null));


        public async void ChatStrat()
        {
            coachControl.Children.Clear();
            Thread.Sleep(3000);
            viewTyping.Visibility = Visibility.Visible;
            foreach (var c in ChatList)
            {
                await AsyncCall.Invoke(() =>
                {
                    Thread.Sleep(2000);
                    Dispatcher.Invoke(() =>
                    {
                        charScroll.ScrollToBottom();
                        coachControl.Children.Add(new ChatBox(c, false));
                    });
                    return true;
                }, false);
            }

            viewTyping.Visibility = Visibility.Collapsed;
        }

    }
}

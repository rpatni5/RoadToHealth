using RTH.Windows.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using RTH.Windows.ViewModels.Objects;
using RTH.Windows.Views.Helpers;

namespace RTH.Windows.Views.UserControls
{
    /// <summary>
    /// Interaction logic for us_Dashboard.xaml
    /// </summary>
    public partial class DashboardView : UserControl
    {
        #region variables
        string openKeyString = string.Empty;
        #endregion   
        public DashboardView()
        {
            InitializeComponent();
        }
        private void DiseaseButton_Click(object sender, RoutedEventArgs e)
        {
            RadioButton button = sender as RadioButton;
            DiseaseData diseaseData = (DiseaseData)button.DataContext;
            SummeryContainer.DataContext = button.DataContext;
            RedoContainer.DataContext = button.DataContext;
            if (diseaseData.StatusText == "InComplete")
            {
                DoubleAnimation da = new DoubleAnimation();
                if (openKeyString == string.Empty)
                {
                    Animate(MainScore.MaxHeight, 0);
                    TimeLineContainer.Visibility = Visibility.Collapsed;
                    SummeryContainer.Visibility = Visibility.Visible;
                    carousel.Visibility = Visibility.Collapsed;
                }
                else if (MainScore.Height > 0 || Double.IsNaN(MainScore.Height))
                {
                    Animate(MainScore.MaxHeight, 0);
                    TimeLineContainer.Visibility = Visibility.Collapsed;
                    SummeryContainer.Visibility = Visibility.Visible;
                    carousel.Visibility = Visibility.Collapsed;
                }
                else if (openKeyString == diseaseData.KeyString)
                {
                    Animate(0, MainScore.MaxHeight);
                    TimeLineContainer.Visibility = Visibility.Visible;
                    SummeryContainer.Visibility = Visibility.Collapsed;
                    carousel.Visibility = Visibility.Visible;
                }
                openKeyString = diseaseData.KeyString;
            }
            else
            {
                if (MainScore.Height > 0 || Double.IsNaN(MainScore.Height))
                {
                    double totalWidth= this.ActualWidth;
                    Point position = Mouse.GetPosition(this);
                    int calWidth =Convert.ToInt32(totalWidth);
                    int buttonPosition = Convert.ToInt32(position.X);
                    if (calWidth < 500)
                        RedoPopup.HorizontalOffset = CalculateOffset(calWidth , buttonPosition*2,3);
                    else if (calWidth < 800)
                        RedoPopup.HorizontalOffset = CalculateOffset(calWidth, buttonPosition*1.5, 6);
                    else if (calWidth < 1100)
                        RedoPopup.HorizontalOffset = CalculateOffset(calWidth, buttonPosition*1.4, 15);
                    else if (calWidth < 1400)
                        RedoPopup.HorizontalOffset = CalculateOffset(calWidth, buttonPosition*1.5, 20);

                    RedoPopup.PlacementTarget = button;
                    RedoPopup.IsOpen = true;                   
                }
                else
                {
                    Animate(0, MainScore.MaxHeight);
                }
                TimeLineContainer.Visibility = Visibility.Visible;
                SummeryContainer.Visibility = Visibility.Collapsed;
                carousel.Visibility = Visibility.Visible;
            }
        }
        private double CalculateOffset(int calWidth,double  buttonPosition,int offset)
        {
            return (calWidth* offset*1.0)/ buttonPosition;
        }

        private void Animate(double from, double to)
        {
            DoubleAnimation da = new DoubleAnimation();
            da.From = from;
            da.To = to;
            da.Duration = new Duration(TimeSpan.FromSeconds(.5));
            MainScore.BeginAnimation(Button.HeightProperty, da);
        }
    }
}

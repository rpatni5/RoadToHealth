using RTH.Windows.ViewModels.Common;
using RTH.Windows.ViewModels.Objects;
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Animation;

namespace RTH.Windows.Views.UserControls
{
    /// <summary>
    /// Interaction logic for us_Dashboard.xaml
    /// </summary>
    public partial class DashboardView : ViewBase
    {
        #region properties

        private RelayCommand m_LoadTimeLine;
        public RelayCommand LoadTimeLine
        {
            get
            {
                return m_LoadTimeLine ?? (m_LoadTimeLine = new RelayCommand(
                    ve => OnLoadTimeLine(ve), (t) => true));
            }
        }

        private void OnLoadTimeLine(object ve)
        {
            var diseaseData = ((Grid)RightPanel.FindResource("SummeryContainer")).DataContext as DiseaseData;
            diseaseData.IsChecked = false;
            transition.LoadControl(RightPanel.FindResource("timelineContainer"));
        }
        #endregion
        public DashboardView()
        {
            InitializeComponent();
            ViewModelBase.UserDetails.password = Properties.Settings.Default.Password;
            transition.LoadControl(RightPanel.FindResource("timelineContainer"));
            qStoryboard = new Storyboard();
        }
        private void DiseaseButton_Click(object sender, RoutedEventArgs e)
        {
            RadioButton button = sender as RadioButton;
            DiseaseData diseaseData = (DiseaseData)button.DataContext;
            var SummeryContainer = (Grid)RightPanel.FindResource("SummeryContainer");
            SummeryContainer.DataContext = button.DataContext;
            RedoContainer.DataContext = button.DataContext;
            if (diseaseData.IsCompleted == false)
            {
                transition.LoadControl(SummeryContainer, Controls.Transition.Right);
            }
            else
            {
                double leftPosition;
                transition.LoadControl(RightPanel.FindResource("timelineContainer"));
                button.IsChecked = false;
                if (diseaseData.KeyString == "lung" || diseaseData.KeyString == "dementia")
                {
                    leftPosition = 0;
                }
                else
                {
                    leftPosition = 100.0;

                }

                if (RedoPopup.IsOpen)
                {
                    RedoPopup.IsOpen = false;
                    App.SharedValues.WindowMain.Opacity = 1;
                }
                else
                {
                    RedoPopup.PlacementTarget = button;
                    StartPopUpAnimation(leftPosition);
                    App.SharedValues.WindowMain.Opacity = .8;
                    RedoPopup.IsOpen = true;
                    
                }
            }
        }
        private void RedoPopup_Closed(object sender, EventArgs e)
        {
            if (App.SharedValues.WindowMain != null)
                App.SharedValues.WindowMain.Opacity = 1;

            btnResult.BeginAnimation(Canvas.TopProperty, null);
            btnRedo.BeginAnimation(Canvas.LeftProperty, null);
            btnRedo.BeginAnimation(Canvas.TopProperty, null);

            btnResult.SetValue(Canvas.TopProperty, 85.0);
            btnRedo.SetValue(Canvas.LeftProperty, 50.0);
            btnRedo.SetValue(Canvas.TopProperty, 85.0);
        }
        Storyboard qStoryboard = null;
        private void StartPopUpAnimation(double to)
        {
            var daCanvasTop1 = new DoubleAnimation(85, 8, TimeSpan.FromSeconds(0.3));
            daCanvasTop1.BeginTime = TimeSpan.FromSeconds(0.2);
            Storyboard.SetTarget(daCanvasTop1, btnResult);
            Storyboard.SetTargetProperty(daCanvasTop1, new PropertyPath("(Canvas.Top)"));

            var daCanvasTop2 = new DoubleAnimation(85, 25, TimeSpan.FromSeconds(0.3));
            daCanvasTop2.BeginTime = TimeSpan.FromSeconds(0.2);
            Storyboard.SetTarget(daCanvasTop2, btnRedo);
            Storyboard.SetTargetProperty(daCanvasTop2, new PropertyPath("(Canvas.Top)"));

            var daCanvasLeft = new DoubleAnimation(50, to, TimeSpan.FromSeconds(0.3));
            daCanvasLeft.BeginTime = TimeSpan.FromSeconds(0.2);
            Storyboard.SetTarget(daCanvasLeft, btnRedo);
            Storyboard.SetTargetProperty(daCanvasLeft, new PropertyPath("(Canvas.Left)"));

            qStoryboard.Children.Add(daCanvasTop1);
            qStoryboard.Children.Add(daCanvasTop2);
            qStoryboard.Children.Add(daCanvasLeft);
            qStoryboard.Begin();
        }
    }
}

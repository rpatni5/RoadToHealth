using RTH.Business.Objects;
using RTH.Business.Services;
using RTH.Helpers;
using RTH.Windows.ViewModels.Common;
using RTH.Windows.ViewModels.Objects;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace RTH.Windows.ViewModels
{
    public class ResultViewModel : ViewModels.Common.ViewModelBase
    {

        public ResultViewModel()
        {
            SharingIconVisibility = true;
            //GlobalData.Default.PropertyChanged += Default_PropertyChanged;
            PropertyChanged += OnSelectedDiseaseChanged;
            SelectedDisease = new DiseaseData(GlobalData.Default.ClickedHRA);
        }
        private void Default_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "ClickedHRA")
            {
                if (GlobalData.Default.ClickedHRA != null)
                    SelectedDisease = new DiseaseData(GlobalData.Default.ClickedHRA);
                else SelectedDisease = null;
            }
        }
        private void OnSelectedDiseaseChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "SelectedDisease")
            {
                Reload();
            }
        }

        private void Reload()
        {
            LatestScoreSummary = null;
            Summary = null;
            IsLoaded = false;
            ScoreSummaries = null;
            SetSharingData();
            LoadHealthAreasAsync();
        }


        public override void Refresh()
        {
            //LatestScoreSummary = null;
            //SelectedDisease = new DiseaseData(GlobalData.Default.ClickedHRA);
            if (GlobalData.Default.ClickedHRA != null)
                SelectedDisease = new DiseaseData(GlobalData.Default.ClickedHRA);
            else SelectedDisease = null;
        }

        private void LoadHealthAreasAsync()
        {
            AsyncCall.Invoke(() =>
            {
                SetHeader();
                Summary = ResultService.GetSummaries(UserDetails._id, SelectedDisease.ID, UserDetails.AuthToken.access_token).data;
                ObservableCollection<ScoreSummary> summaries = ResultService.GetScoreSummaryDetails(UserDetails._id, SelectedDisease.ID, UserDetails.AuthToken.access_token);
                if (summaries != null && summaries.Any())
                {
                    ObservableCollection<ScoreSummary> temp = new ObservableCollection<ScoreSummary>();
                    int idx = 0;
                    foreach (ScoreSummary s in summaries)
                    {
                        if (temp.Count < 7)
                        {
                            if (temp.Count > 0 && temp[idx - 1].total_score.Split('.')[0] != s.total_score.Split('.')[0])
                            {
                                temp.Add(s); idx += 1;
                            }
                            else if (temp.Count == 0)
                            {
                                temp.Add(s); idx += 1;
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    ScoreSummaries = temp;
                    LatestScoreSummary = summaries[0];
                    RaiseLoadedEvent();
                }
            });
        }
        void SetHeader()
        {
            if (SelectedDisease != null)
            {
                HeaderTitle = SelectedDisease.Title;
                HeaderColor = SelectedDisease.BgColor;
                KeyString = SelectedDisease.KeyString;
                GlobalData.Default.LastVisitedDiseaseID = SelectedDisease.ID;
            }
            else
            {
                HeaderTitle = HeaderColor = KeyString = GlobalData.Default.LastVisitedDiseaseID = string.Empty;
            }
            HeaderVisibility = true;
            HeaderState = false;
            FooterVisibility = true;
        }

        private void SetSharingData()
        {
            string keyValue = "dashboard";
            if (SelectedDisease != null)
            {
                double score = AssignScore(SelectedDisease.ID);
                keyValue = score <= 59 ? string.Format("{0}_0_59", SelectedDisease.KeyString) : score <= 79 ? string.Format("{0}_60_79", SelectedDisease.KeyString) :
                    string.Format("{0}_80_100", SelectedDisease.KeyString);
            }
            SharingData = TwitterService.GetSharingData(ViewModelBase.UserDetails._id, keyValue, ViewModelBase.UserDetails.AuthToken.access_token);
            SharingData.thumb_image = Config.ApiUrl + SharingData.thumb_image;
            SharingData.name = "Quealth";
        }
        private double AssignScore(string Id)
        {
            ScoreHistory score = ViewModelBase.UserDetails.score_history.FirstOrDefault(x => x.questionnaire == Id);
            return score != null ? score.total_score : 0.00;
        }

        public ObservableCollection<QSummaries> Summary
        {
            get { return GetValue(() => Summary); }
            set { SetValue(() => Summary, value); }
        }
        public ScoreSummary LatestScoreSummary
        {
            get { return GetValue(() => LatestScoreSummary); }
            set { SetValue(() => LatestScoreSummary, value); }
        }

        public ObservableCollection<ScoreSummary> ScoreSummaries
        {
            get { return GetValue(() => ScoreSummaries); }
            set { SetValue(() => ScoreSummaries, value); }
        }
    }
}

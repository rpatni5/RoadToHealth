using RTH.Business.Objects;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace RTH.Windows.Views.UserControls
{
    /// <summary>
    /// Interaction logic for LatestBPReadingControl.xaml
    /// </summary>
    public partial class LatestBPReadingControl : AnswerBase
    {
        public LatestBPReadingControl()
        {
            InitializeComponent();
            DataContextChanged += OnDataContextChanged;
        }
        private void OnDataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            Question q = null;
            if (e.OldValue == null)
            {
                q = (Question)e.NewValue;
                if (q.SelectedAnswers == null)
                {
                    q.SelectedAnswers = new ObservableCollection<Answer>();
                    Answer a = new Answer();
                    a.date = Convert.ToString(DateTime.Now.Ticks);
                    a.key_string = q.key_string;
                    a.element_type = q.element_type;
                    a.question = q._id;
                    a.answer = "mmhg";
                    q.SelectedAnswers.Add(a);
                }
                else {
                    q.SelectedAnswers[0].answer = Convert.ToString(q.SelectedAnswers[0].answer) == "" || Convert.ToString(q.SelectedAnswers[0].answer) =="none" ? "mmhg" : q.SelectedAnswers[0].answer;
                    if ((string)q.SelectedAnswers[0].answer == "mmhg")
                    {
                        q.SelectedAnswers[0].responseBPSystolicMMHG = Convert.ToString(q.SelectedAnswers[0].response1);
                        q.SelectedAnswers[0].responseBPDiastolicMMHG = Convert.ToString(q.SelectedAnswers[0].response2);                        
                    }
                    if ((string)q.SelectedAnswers[0].answer == "mmhg10")
                    {
                        q.SelectedAnswers[0].responseBPSystolicMMHG10 = Convert.ToString(q.SelectedAnswers[0].response1);
                        q.SelectedAnswers[0].responseBPDiastolicMMHG10 = Convert.ToString(q.SelectedAnswers[0].response2);
                    }
                    q.SelectedAnswers[0].responseBPSystolicMMHG = q.SelectedAnswers[0].responseBPSystolicMMHG == "0" ? "" : q.SelectedAnswers[0].responseBPSystolicMMHG;
                    q.SelectedAnswers[0].responseBPDiastolicMMHG = q.SelectedAnswers[0].responseBPDiastolicMMHG == "0" ? "" : q.SelectedAnswers[0].responseBPDiastolicMMHG;
                    q.SelectedAnswers[0].responseBPSystolicMMHG10 = q.SelectedAnswers[0].responseBPSystolicMMHG10 == "0" ? "" : q.SelectedAnswers[0].responseBPSystolicMMHG10;
                    q.SelectedAnswers[0].responseBPDiastolicMMHG10 = q.SelectedAnswers[0].responseBPDiastolicMMHG10 == "0" ? "" : q.SelectedAnswers[0].responseBPDiastolicMMHG10;
                }

            }
            else
            {
                q = (Question)e.OldValue;
                q.SelectedAnswers[0].ClearResponses();
                if (q.SelectedAnswers[0].answer == null)
                {
                    q.SelectedAnswers[0].answer = "mmhg";
                }
                switch (q.SelectedAnswers[0].answer.ToString())
                {
                    case "mmhg":
                        q.SelectedAnswers[0].responseBPDiastolicMMHG = Convert.ToString(q.SelectedAnswers[0].responseBPDiastolicMMHG) == "" ? "0" : q.SelectedAnswers[0].responseBPDiastolicMMHG;
                        q.SelectedAnswers[0].responseBPSystolicMMHG = Convert.ToString(q.SelectedAnswers[0].responseBPSystolicMMHG) == "" ? "0" : q.SelectedAnswers[0].responseBPSystolicMMHG;
                        q.SelectedAnswers[0].response = Convert.ToDouble(q.SelectedAnswers[0].responseBPDiastolicMMHG) + ((Convert.ToDouble(q.SelectedAnswers[0].responseBPSystolicMMHG) - Convert.ToDouble(q.SelectedAnswers[0].responseBPDiastolicMMHG)) / 3);
                        q.SelectedAnswers[0].response1 = q.SelectedAnswers[0].responseBPSystolicMMHG;
                        q.SelectedAnswers[0].response2 = q.SelectedAnswers[0].responseBPDiastolicMMHG;
                        break;
                    case "mmhg10":
                        q.SelectedAnswers[0].responseBPDiastolicMMHG = Convert.ToString(q.SelectedAnswers[0].responseBPDiastolicMMHG) == "" ? "0" : q.SelectedAnswers[0].responseBPDiastolicMMHG;
                        q.SelectedAnswers[0].responseBPSystolicMMHG = Convert.ToString(q.SelectedAnswers[0].responseBPSystolicMMHG) == "" ? "0" : q.SelectedAnswers[0].responseBPSystolicMMHG;
                        q.SelectedAnswers[0].response = Convert.ToDouble(q.SelectedAnswers[0].responseBPDiastolicMMHG) + ((Convert.ToDouble(q.SelectedAnswers[0].responseBPSystolicMMHG) - Convert.ToDouble(q.SelectedAnswers[0].responseBPDiastolicMMHG)) / 3);
                        q.SelectedAnswers[0].response1 = q.SelectedAnswers[0].responseBPSystolicMMHG10;
                        q.SelectedAnswers[0].response2 = q.SelectedAnswers[0].responseBPDiastolicMMHG10;

                        break;
                    default:
                        break;
                }
            }
        }
    }
}

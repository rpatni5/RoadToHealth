using RTH.Windows.ViewModels;
using RTH.Windows.ViewModels.Common;
using System.Windows;
using RTH.Helpers.Messaging;
using System.Windows.Controls.Primitives;
using System;

namespace RTH.Windows.Views.UserControls
{
    /// <summary>
    /// Interaction logic for StrategyUserControl.xaml
    /// </summary>
    public partial class StrategyView : ViewBase
    {
        public string ObjectiveId { get; set; }
        public StrategyView()
        {
            InitializeComponent();
        }

        private RelayCommand m_CheckedCommand;
        private RelayCommand m_EditStrategyCommand;
        private RelayCommand previousCommand;

        public RelayCommand PreviousCommand
        {
            get
            {
                return previousCommand ?? (previousCommand = new RelayCommand(
                    vm => ExecutePreviousCommand(vm), (vm) => true));
            }
        }

        private RelayCommand setCommand;

        public RelayCommand SetCommand
        {
            get
            {
                return setCommand ?? (setCommand = new RelayCommand(
                    vm => ExecuteSetCommand(vm), (vm) => true));
            }
        }

        private void ExecuteSetCommand(object vm)
        {
            StrategyViewModel svm = vm as StrategyViewModel;
            svm.SubmitStrategy();
        }

        private void ExecutePreviousCommand(object obj)
        {
            if (ViewModelBase.HealthStrategyRequest.question.Count ==0)
            {
                App.SharedValues.WindowMain.LoadView(Enums.ViewEnum.HealthPlanView, param: null);                
            }
            else
            {
                App.SharedValues.WindowMain.LoadView(Enums.ViewEnum.HealthPlanQuestionnaireView, param: ObjectiveId);
            }
        }

        public RelayCommand CheckedCommand
        {
            get
            {
                return m_CheckedCommand ?? (m_CheckedCommand = new RelayCommand(
                    ve => ToggleButtonChecked(ve)));
            }
        }
        public RelayCommand EditStrategyCommand
        {
            get
            {
                return m_EditStrategyCommand ?? (m_EditStrategyCommand = new RelayCommand(
                    ve => ShowEditStragey(ve)));
            }
        }

        private void ToggleButtonChecked(object ve)
        {
            if (ve != null)
            {
                ToggleButton tBtn = (ToggleButton)ve;
                if (tBtn.IsChecked == true)
                {
                    tBtn.IsChecked = false;
                }
                else
                {
                    tBtn.IsChecked = true;
                }
            }
        }

        private void ShowEditStragey(object ve)
        {
            this.txtNewStrategy.Text = ve == null ? string.Empty : ve as string;
            this.strategyContainer.Visibility = Visibility.Collapsed;
            this.EditStrategyGrid.Visibility = Visibility.Visible;
        }

        public override void OnMessage(Message e)
        {
            if (e.Type == MessageType.StrategyAdded)
            {
                HideEditStrategy();
            }
        }

        private void HideEditStrategy()
        {
            this.strategyContainer.Visibility = Visibility.Visible;
            this.EditStrategyGrid.Visibility = Visibility.Collapsed;
            (this.ViewModel as StrategyViewModel).ErrorMessage = string.Empty;
        }
        public override void LoadViewModel()
        {
            this.ViewModel = ViewModelLocator.GetNew<StrategyViewModel>();
            this.RefreshOnLoad = true;
            base.LoadViewModel();
        }

        public override void OnViewLoaded()
        {
            (this.ViewModel as StrategyViewModel).GetHealthPlanQuestion(ObjectiveId);
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            HideEditStrategy();
        }
    }
}

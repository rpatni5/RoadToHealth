using RTH.Business.Objects.JSON;
using RTH.Windows.ViewModels;
using RTH.Windows.ViewModels.Common;
using RTH.Windows.Views.Controls;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace RTH.Windows.Views.UserControls
{
    /// <summary>
    /// Interaction logic for CoachChatView.xaml
    /// </summary>
    public partial class CoachChatView : ViewBase
    {
        public CoachChatView()
        {
            InitializeComponent();
        }
        CoachChatViewModel vm;
        public override void LoadViewModel()
        {
            vm = ViewModelLocator.Get<CoachChatViewModel>();
            ViewModel = vm;
            base.LoadViewModel();
        }
        List<string> lstChat;
        public void StartChat(Engagement engagement)
        {
            AsyncCall.Invoke(() =>
            {
                ConversationThread conversation = vm.GetSpecificActivity(engagement._id);
                if (conversation != null && !string.IsNullOrEmpty(conversation.engage_statement))
                {
                    FetchData(conversation.engage_statement);
                }
                else
                {
                    viewTyping.Visibility = Visibility.Collapsed;
                }
            }, false);
        }

        private void FetchData(string str)
        {
            lstChat = str.Split('\n').ToList();
        }
        private int chatWaitTime = 2000;
        int chatItrerator = 0;
        private async void DisplayChat()
        {
            viewTyping.Visibility = Visibility.Visible;
            chatScroll.ScrollToBottom();
            chatItrerator = 0;
            int count = lstChat.Count;
            for (chatItrerator = 0; chatItrerator < count;)
            {
                await AsyncCall.Invoke(() =>
                {
                    Thread.Sleep(chatWaitTime);
                    if (chatWaitTime != 0)
                    {
                        Dispatcher.Invoke(() =>
                        {
                            AddChatBlock();
                        });
                    }
                    chatWaitTime = 2000;
                    return true;
                }, false);
            }
        }
        private void AddChatBlock()
        {
            try
            {
                if (lstChat != null && chatItrerator < lstChat.Count)
                {
                    chatScroll.ScrollToBottom();
                    coachControl.Children.Add(new ChatBox(lstChat[chatItrerator], false));
                    chatItrerator++;
                    if (chatItrerator == lstChat.Count)
                    {
                        lstChat = null;
                        viewTyping.Visibility = Visibility.Collapsed;
                        SwipeOption();
                    }
                }
            }
            catch
            {

            }
        }

        private void SwipeOption()
        {
        }
    }
}

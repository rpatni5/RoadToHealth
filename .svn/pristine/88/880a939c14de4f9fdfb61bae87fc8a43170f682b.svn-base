using RTH.Windows.ViewModels;
using RTH.Windows.ViewModels.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace RTH.Windows.Views.UserControls
{
    /// <summary>
    /// Interaction logic for QuealthCoachView.xaml
    /// </summary>
    public partial class QuealthCoachView : ViewBase
    {
        public QuealthCoachView()
        {
            InitializeComponent();
        }
        DispatcherTimer _tmr = new DispatcherTimer();
        public override void LoadViewModel()
        {
            this.ViewModel = ViewModelLocator.Get<TermsAndConditionsViewModel>();
            
        }
        public override void OnViewLoaded()
        {
            AddCoachSuggestion();
        }

        private async void AddCoachSuggestion()
        {
            List<string> lst = new List<string>();
            lst.Add("Hellooo This will surely answer your question as I  as it can cause conflicts.... ");
            lst.Add("Hellooo This will surely answer your question as I  as it can cause conflicts.... ");
            lst.Add("Hellooo This will surely answer your question as I  as it can cause conflicts.... ");
            lst.Add("Hellooo This will surely answer your question as I  as it can cause conflicts.... ");
            foreach(var c in lst)          
            {
              await  AsyncCall.Invoke(() =>
                {
                    Thread.Sleep(2000);
                    Dispatcher.Invoke(() =>
                    {
                        coachControl.Children.Insert(coachControl.Children.IndexOf(viewTyping), new TextBlock()
                        {
                            Text =c,
                            FontSize = 14.0,
                            Foreground = Brushes.Gray,
                            Margin = new Thickness(20, 0, 20, 20),
                            Background = Brushes.LightGray,
                            Padding = new Thickness(20, 10, 20, 10),
                            TextWrapping = TextWrapping.Wrap,
                        });
                    });
                    Thread.Sleep(1000);

                    return true;
                }, false);
            }

            viewTyping.Visibility = Visibility.Collapsed;
            ButtonSignUp();
        }

        private void ButtonSignUp()
        {
            btnGetStarted.SetValue(VisibilityProperty, Visibility.Visible);
            Storyboard qSB = new Storyboard();
            ThicknessAnimation da = new ThicknessAnimation(new Thickness(400, 0, 0, 0), new Thickness(0, 0, 0, 0), TimeSpan.FromSeconds(0.75));
            Storyboard.SetTarget(da, btnGetStarted);
            Storyboard.SetTargetProperty(da, new PropertyPath(Border.MarginProperty));
            qSB.Children.Add(da);
            qSB.Begin();
        }
    }
}

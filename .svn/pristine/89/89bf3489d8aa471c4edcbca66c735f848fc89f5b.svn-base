using System.ComponentModel;
using System.Configuration.Install;
using System;
using System.IO;

namespace SetupDemo.Install
{
    [RunInstaller(true)]
    public partial class InstallerCustomActions : Installer
    {
        public static void Main(string [] arg)
        {

        }
        /// <summary>
        /// Default constructor, used by the designer. This is generated by 
        /// 'Add New Item' wizard when you add an installer class.
        /// </summary>
        public InstallerCustomActions()
        {
            InitializeComponent();
        }

        /// <summary>
        /// To cause this method to be invoked, I added the primary project output to the 
        /// setup project's custom actions, under the "Install" folder.
        /// </summary>
        /// <param name="stateSaver">A dictionary object that will be retrievable during the uninstall process.</param>
        public override void Install(System.Collections.IDictionary stateSaver)
        {
            base.Install(stateSaver);
        }
   
        /// <summary>
        /// To cause this method to be invoked, I added the primary project output to the 
        /// setup project's custom actions, under the "Uninstall" folder.
        /// </summary>
        /// <param name="savedState">An IDictionary object that will contain objects that were set as 
        /// part of the installation process.</param>
        public override void Uninstall(System.Collections.IDictionary savedState)
        {
            var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
            if (Directory.Exists(Path.Combine(appDataPath, "RTH")))
            {
                Directory.Delete(Path.Combine(appDataPath, "RTH"), true);
            }
            base.Uninstall(savedState);
        }       
    }
}
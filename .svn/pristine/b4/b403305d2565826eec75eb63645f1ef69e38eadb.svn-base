using RTH.Windows.Views.Helpers;
using System;
using System.Net.Cache;
using System.Windows;
using System.Windows.Media.Imaging;

namespace RTH.Windows.Views.Controls
{
    public class CacheableImage : System.Windows.Controls.Image
    {
        static CacheableImage()
        {
            DefaultStyleKeyProperty.OverrideMetadata(typeof(CacheableImage),
                new FrameworkPropertyMetadata(typeof(CacheableImage)));
        }

        public string ImageUrl
        {
            get { return (string)GetValue(ImageUrlProperty); }
            set { SetValue(ImageUrlProperty, value); }
        }

        private static async void ImageUrlPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)
        {
            var url = e.NewValue as string;

            if (string.IsNullOrEmpty(url))
                return;

            var cachedImage = (CacheableImage)obj;
            var bitmapImage = new BitmapImage();

            switch (ImageCacheHelper.AppCacheMode)
            {
                case Helpers.CacheMode.WinINet:
                    bitmapImage.BeginInit();
                    bitmapImage.UriSource = new Uri(url);
                    // Enable IE-like cache policy.
                    bitmapImage.UriCachePolicy = new RequestCachePolicy(RequestCacheLevel.Default);
                    bitmapImage.EndInit();
                    cachedImage.Source = bitmapImage;
                    break;

                case Helpers.CacheMode.Dedicated:
                    try
                    {
                        var memoryStream = await ImageCacheHelper.HitAsync(url);
                        if (memoryStream == null)
                            return;

                        bitmapImage.BeginInit();
                        bitmapImage.StreamSource = memoryStream;
                        bitmapImage.EndInit();
                        cachedImage.Source = bitmapImage;
                    }
                    catch (Exception)
                    {
                        // ignored, in case the downloaded file is a broken or not an image.
                    }
                    break;

                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        public static readonly DependencyProperty ImageUrlProperty = DependencyProperty.Register("ImageUrl",
            typeof(string), typeof(CacheableImage), new PropertyMetadata("", ImageUrlPropertyChanged));
    }
}

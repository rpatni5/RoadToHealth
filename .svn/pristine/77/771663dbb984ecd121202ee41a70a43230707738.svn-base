using RTH.Helpers;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace RTH.Business.Objects
{
    public class Category : NotifyBase
    {
        public string name
        {
            get { return GetValue(() => name); }
            set { SetValue(() => name, value); }
        }
        public string icon
        {
            get { return GetValue(() => icon); }
            set { SetValue(() => icon, value); }
        }
        public string color
        {
            get { return GetValue(() => color); }
            set { SetValue(() => color, value); }
        }
        public string question_color
        {
            get { return GetValue(() => question_color); }
            set { SetValue(() => question_color, value); }
        }
    }
    public class Subcategory
    {
        public Category subcategory { get; set; }
        public ObservableCollection<Question> questions { get; set; }
    }
    public class Dependency
    {
        public ObservableCollection<object> dependency_answer { get; set; }
        public string dependency_question { get; set; }
    }
    public class Range
    {
        public string _id { get; set; }
        public double max { get; set; }
        public double min { get; set; }
        public string unit { get; set; }
        public string special { get; set; }
    }
    public class Question
    {
        public string _id { get; set; }
        public string question { get; set; }
        public Dependency dependency { get; set; }
        public int element_type { get; set; }
        public bool decimals { get; set; }
        public string decimal_places { get; set; }
        public ObservableCollection<Range> ranges { get; set; }
        public string summary { get; set; }
        public string helper_title { get; set; }
        public string helper_image { get; set; }
        public int gender { get; set; }
        public string key_string { get; set; }
        public ObservableCollection<Option> answers { get; set; }
        public int roundVal { get; set; }
        public bool is_restricted { get; set; }
    }
    public class Option
    {
        public string answer_text { get; set; }
        public string answer_label { get; set; }
        public object answer_value { get; set; }
        public string _id { get; set; }
        public bool answer_overrider { get; set; }
    }
    public class CategorisedQuestions
    {
        public Category category { get; set; }
        public ObservableCollection<Question> questions { get; set; }
        public ObservableCollection<Subcategory> subcategories { get; set; }
    }
    public class HRA
    {
        public string _id { get; set; }
        public string background_colour { get; set; }
        public object sponsor { get; set; }
        public string title { get; set; }
        public string strap { get; set; }
        public string summary { get; set; }
        public string helper { get; set; }
        public string updated { get; set; }
        public ObservableCollection<CategorisedQuestions> questions { get; set; }
        public string image_name { get; set; }
        public string image_logo_color { get; set; }
        public string image_logo_grey { get; set; }

        public ObservableCollection<Question> GetQuestions()
        {
            if (questions == null || questions.Count == 0) return null;
            ObservableCollection<Question> ques = null;
            foreach (CategorisedQuestions item in questions)
            {
                if (ques == null) ques = new ObservableCollection<Question>();
                ques.AddRange(item.questions);
                if (item.subcategories != null && item.subcategories.Count > 0)
                {
                    ques.AddRange(item.subcategories.GetCollection<Subcategory, Question>("questions"));
                }
            }
            return ques;
        }
    }

    public static class ObservableCollectionExtension
    {
        public static void AddRange<T>(this ObservableCollection<T> param, ObservableCollection<T> collection)
        {
            foreach (var item in collection)
            {
                param.Add(item);
            }

        }

        public static ObservableCollection<T1> GetCollection<T, T1>(this ObservableCollection<T> param, string collectionName)
        {
            if (param == null && param.Count == 0) return null;
            if (string.IsNullOrEmpty(collectionName)) return null;
            ObservableCollection<T1> obj = new ObservableCollection<T1>();
            foreach (T item in param)
            {
                Type t = item.GetType();

                PropertyInfo prop = t.GetProperty(collectionName);

                obj.AddRange((ObservableCollection<T1>)prop.GetValue(item));
            }
            return obj;
        }
    }

}

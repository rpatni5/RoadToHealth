using System;
using System.Collections.Specialized;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using Newtonsoft.Json;
using RTH.Business.Objects;
using RTH.Helpers;
using RTH.Helpers.Exceptions;
using System.Net;
using System.Net.Cache;

namespace RTH.Business.Services
{
    public enum RequestEnum
    {
        Post,
        Get,
        PostWithJson,
        GetWithJson,
    }
    public static class Http
    {

        private static string _APIURL = Config.ApiUrl;

        internal static string ExecuteTwitterGET(string requestUrl, string accessToken)
        {
            using (var client = new HttpClient())
            {
                if (!string.IsNullOrEmpty(accessToken)) client.DefaultRequestHeaders.Add("Authorization", accessToken);
                HttpResponseMessage response = client.GetAsync(requestUrl).Result;
                if (response.IsSuccessStatusCode)
                    return response.Content.ReadAsStringAsync().Result;
            }
            return null;
        }

        internal static string ExecuteTwitterPOST(string requestUrl, string accessToken, HttpContent data = null)
        {
            using (var client = new HttpClient())
            {
                if (!string.IsNullOrEmpty(accessToken)) client.DefaultRequestHeaders.Add("Authorization", accessToken);
                HttpResponseMessage response = client.PostAsync(requestUrl, data).Result;
                if (response.IsSuccessStatusCode)
                    return response.Content.ReadAsStringAsync().Result;
                else
                    return response.ReasonPhrase;
            }

        }

        internal static T ExecuteTwitterGET<T>(string requestUrl, string accessToken)
        {
            using (var client = new HttpClient())
            {
                if (!string.IsNullOrEmpty(accessToken)) client.DefaultRequestHeaders.Add("Authorization", accessToken);
                HttpResponseMessage response = client.GetAsync(requestUrl).Result;
                if (response.IsSuccessStatusCode)
                    return response.Content.ReadAsAsync<T>().Result;
            }
            return default(T);
        }

        /// <summary>
        /// Date                     Name            Descriptrion
        /// 14-Dec-2015              Pawan           user to create Query string for Service 
        /// 
        /// </summary>
        /// <param name="oUser"></param>
        /// <returns></returns>
        private static String MakeQuery(this NameValueCollection nvc)
        {
            return String.Join("&", nvc.AllKeys.Select(a => a + "=" + HttpUtility.UrlEncode(nvc[a])));
        }

        public static T ExecuteGET<T>(APIMethod method, NameValueCollection queryString, string authToken = null)
        {
            string methodUrl = method.GetMethodUri();
            return ExecuteGET<T>(methodUrl, queryString, authToken);
        }



        public static T ExecuteGET<T>(string methodUrl, NameValueCollection queryString, string authToken = null)
        {
            var webRequestHandler = new WebRequestHandler()
            {
                CachePolicy = new HttpRequestCachePolicy(HttpRequestCacheLevel.Revalidate)
            };
            using (var client = new HttpClient(webRequestHandler))
            {

                if (!string.IsNullOrEmpty(authToken)) client.DefaultRequestHeaders.Add("Authorization", "Bearer " + authToken);
                else
                    client.DefaultRequestHeaders.Accept.Add(
                   new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
                string requestUrl = String.Concat(_APIURL, methodUrl);
                if (queryString != null)
                {
                    requestUrl = String.Concat(_APIURL, methodUrl, "?", queryString.MakeQuery());
                }
                try
                {
                    return ExecuteRequestAsync<T>(client, RequestEnum.Get, requestUrl).Result;
                }
                catch (AggregateException ex)
                {
                    if (ex != null && ex.InnerException != null && ex.InnerException is CachedObjectNotFoundException)
                    {
                        throw ex.InnerException;
                    }
                    throw;
                }
            }
        }
        public static T ExecutePOST<T>(string methodUrl, NameValueCollection nvcData, NameValueCollection headers = null, string ContentType = "application/json")
        {
            using (HttpClient client = new HttpClient())
            {
                StringContent content = new StringContent(nvcData.MakeQuery(), Encoding.UTF8, ContentType);
                if (headers != null && headers.Count > 0)
                {
                    foreach (string item in headers.AllKeys)
                    {
                        content.Headers.Add(item, headers[item]);
                    }
                }
                //content.Headers.Add();
                //HttpResponseMessage response;
                //try
                //{
                //    response = client.PostAsync(String.Concat(_APIURL, methodUrl), content).Result;
                //    if (response.IsSuccessStatusCode)
                //    {
                //        return response.Content.ReadAsAsync<T>().Result;
                //    }
                //    else
                //    {
                //        throw new Exception(string.Format("{0} ({1})", (int)response.StatusCode, response.ReasonPhrase));
                //    }
                //}
                //catch
                //{
                //    throw new HttpException("There seems some internet connectivity issues. Please check and try again later");
                //}
                return ExecuteRequestAsync<T>(client, RequestEnum.Post, String.Concat(_APIURL, methodUrl), content: content).Result;
            }
        }
        public static T ExecutePOST<T, K>(string methodUrl, K data, NameValueCollection headers = null, string authToken = null)
        {
            using (var client = new HttpClient())
            {

                if (!string.IsNullOrEmpty(authToken)) {
                    client.DefaultRequestHeaders.Add("Authorization", "Bearer " + authToken);
                    client.MaxResponseContentBufferSize = 500000;
                }
                else
                    client.DefaultRequestHeaders.Accept.Add(
                   new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response;
                try
                {
                    response = client.PostAsJsonAsync(String.Concat(_APIURL, methodUrl), data).Result;
                    if (response.IsSuccessStatusCode)
                    {
                        return response.Content.ReadAsAsync<T>().Result;
                    }
                    else
                    {
                        throw new Exception(string.Format("{0} ({1})", (int)response.StatusCode, response.ReasonPhrase));
                    }
                }
                catch (Exception ex)
                {
                    throw new HttpException("There seems some internet connectivity issues. Please check and try again later");
                }
            }
        }
        public static T ExecutePOST<T>(string methodUrl, object Data, string authToken = null)
        {
            using (HttpClient client = new HttpClient())
            {
                if (!string.IsNullOrEmpty(authToken)) client.DefaultRequestHeaders.Add("Authorization", "Bearer " + authToken);
                else
                    client.DefaultRequestHeaders.Accept.Add(
                   new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                var Json = Newtonsoft.Json.JsonConvert.SerializeObject(Data);
                var CompleteJson = "{\"answers\":" + Json.ToString() + "}";

                HttpResponseMessage response;
                try
                {
                    response = client.PostAsync(String.Concat(_APIURL, methodUrl, "/1"), new StringContent(CompleteJson, Encoding.UTF8, "application/json")).Result;
                    if (response.IsSuccessStatusCode)
                    {
                        var HttpResponse = response.Content.ReadAsStringAsync().Result;
                        if (HttpResponse.Split('\n')[1].Split(':')[1].Replace(',', ' ').Trim().Equals("0"))
                        {
                            return response.Content.ReadAsAsync<T>().Result;
                        }
                        else
                        {
                            QuestionnairesResponse oQuestionnairesResponse = new QuestionnairesResponse();
                            oQuestionnairesResponse.status = -1;
                            return (T)(object)oQuestionnairesResponse;
                        }
                    }
                    else
                    {
                        throw new Exception(string.Format("{0} ({1})", (int)response.StatusCode, response.ReasonPhrase));
                    }
                }
                catch
                {
                    throw new HttpException("There seems some internet connectivity issues. Please check and try again later");
                }
            }
        }
        public static T ExecuteJSONPOST<T>(string methodUrl, object JSON, string authToken = null)
        {
            using (HttpClient client = new HttpClient())
            {

                if (!string.IsNullOrEmpty(authToken)) client.DefaultRequestHeaders.Add("Authorization", "Bearer " + authToken);
                else
                    client.DefaultRequestHeaders.Accept.Add(
                   new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                var Json = JsonConvert.SerializeObject(JSON);
                HttpResponseMessage response;
                try
                {
                    response = client.PostAsync(String.Concat(_APIURL, methodUrl), new StringContent(Json, Encoding.UTF8, "application/json")).Result;
                    if (response.IsSuccessStatusCode)
                    {
                        return response.Content.ReadAsAsync<T>().Result;
                    }
                    else
                    {
                        throw new Exception(string.Format("{0} ({1})", (int)response.StatusCode, response.ReasonPhrase));
                    }
                }
                catch
                {
                    throw new HttpException("There seems some internet connectivity issues. Please check and try again later");
                }
            }
        }
        public static async Task<object> GetAsync(string requestUrl)
        {
            using (var client = new HttpClient())
            {
                HttpResponseMessage response = client.GetAsync(requestUrl).Result;
                if (response.IsSuccessStatusCode)
                {
                    var data = await response.Content.ReadAsStringAsync();
                    return JsonConvert.DeserializeObject(data);
                }
                else
                {
                    throw new Exception(string.Format("{0} ({1})", (int)response.StatusCode, response.ReasonPhrase));
                }
            }
        }
        public static async void PostAsync(string requestUrl, object oList, string accessToken)
        {
            using (var client = new HttpClient())
            {
                var RequestCollection = Newtonsoft.Json.JsonConvert.SerializeObject(oList);
                var CompleteJson = "{\"journey\":" + RequestCollection.ToString() + "}";
                if (!string.IsNullOrEmpty(accessToken)) client.DefaultRequestHeaders.Add("Authorization", "Bearer " + accessToken);
                else
                    client.DefaultRequestHeaders.Accept.Add(
                   new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                //try
                //{
                //    var response = await client.PostAsync(String.Concat(_APIURL, requestUrl), new StringContent(CompleteJson, Encoding.UTF8, "application/json"));
                //    if (response.IsSuccessStatusCode)
                //    {
                //        await response.Content.ReadAsStringAsync();
                //    }
                //    else
                //    {
                //        throw new Exception(string.Format("{0} ({1})", (int)response.StatusCode, response.ReasonPhrase));
                //    }
                //}
                //catch (Exception)
                //{
                //    throw;
                //}
                await ExecuteRequestAsync<string>(client, RequestEnum.Post, String.Concat(_APIURL, requestUrl), new StringContent(CompleteJson, Encoding.UTF8, "application/json"));
            }
        }
        static object _lockObject = new object();
        private async static Task<T> ExecuteRequestAsync<T>(HttpClient client, RequestEnum requestType, string requestUri, HttpContent content = null)
        {



            System.Collections.Generic.IDictionary<string, string> key = new System.Collections.Generic.Dictionary<string, string>();
            int paramsIndex = requestUri.IndexOf('?');
            string url;
            if (paramsIndex >= 0)
            {
                var urlParts = requestUri.Split('?');
                url = urlParts[0];
                if (urlParts.Length > 1)
                {
                    if (!string.IsNullOrEmpty(urlParts[1]))
                    {
                        var urlParams = urlParts[1].Split('&');
                        foreach (var item in urlParams)
                        {
                            if (!string.IsNullOrEmpty(item))
                            {
                                var param = item.Split('=');
                                if (param[0].ToLower() != "client_offset" && param[0].ToLower() != "client_date" && param[0].ToLower() != "password")
                                {
                                    key.Add(param[0], param[1]);
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                url = requestUri;
            }
            key.Add("requestUrl", url);
            key.Add("method", requestType.ToString());
            var responseKey = QuealthSerializer.GenerateKey(key);
            try
            {
                HttpResponseMessage response = null;
                if (requestType == RequestEnum.Get)
                {
                    response = await client.GetAsync(requestUri).ConfigureAwait(false);
                }
                else if (requestType == RequestEnum.Post)
                {

                    response = await client.PostAsync(requestUri, content).ConfigureAwait(false);
                }
                return await GetReponseAsync<T>(response, responseKey);
            }
            catch (HttpException ex)
            {
                return ProcessRequestOffline<T>(key, url, responseKey);
            }
            catch (HttpRequestException ex)
            {
                return ProcessRequestOffline<T>(key, url, responseKey);
            }
            catch (WebException ex)
            {
                return ProcessRequestOffline<T>(key, url, responseKey);
            }
            catch (AggregateException ex)
            {
                if (ex.InnerException is HttpException || ex.InnerException is HttpRequestException || ex.InnerException is WebException)
                    return ProcessRequestOffline<T>(key, url, responseKey);
                else throw;
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        private async static Task<T> GetReponseAsync<T>(HttpResponseMessage response, string responseKey)
        {
            object obj = null;
            if (response.IsSuccessStatusCode)
            {
                if (typeof(T) == typeof(string)) obj = await response.Content.ReadAsStringAsync();
                else
                {
                    obj = await response.Content.ReadAsAsync<T>();
                }
                QuealthSerializer.WriteToJsonFile(responseKey, obj);
                return (T)obj;
            }
            else
            {
                throw new UnsuccessfullRequestException(string.Format("{0} ({1})", (int)response.StatusCode, response.ReasonPhrase));
            }
        }

        private static T ProcessRequestOffline<T>(System.Collections.Generic.IDictionary<string, string> key, string url, string responseKey)
        {
            var resp = QuealthSerializer.ReadFromJsonFile<T>(responseKey);
            if (resp == null)
            {
                if (typeof(T) == typeof(User))
                {
                    throw new LoginException("User cannot be validated offline");
                }
                var cacheEx = new CachedObjectNotFoundException("Cached object not found");
                cacheEx.Source = url;
                cacheEx.Source = key.ToString("\n");
                throw cacheEx;
            }
            return resp;
        }
    }

}

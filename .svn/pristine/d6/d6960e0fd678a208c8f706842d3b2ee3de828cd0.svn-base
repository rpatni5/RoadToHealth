using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Windows.Media;

namespace RTH.Helpers
{
    public static class ExtensionMethod
    {
        public static string ToPascal(this string parm)
        {
            return CultureInfo.InvariantCulture.TextInfo.ToTitleCase(parm.ToLowerInvariant());
        }

        public static T ToChangeType<T>(this object variable) where T : IConvertible
        {
            try
            {
                return variable != null ? (T)Convert.ChangeType(variable, typeof(T)) : default(T);
            }
            catch (InvalidCastException ex)
            {
                return default(T);
            }
            catch (FormatException ex)
            {
                return default(T);
            }
        }

        public static T GetPropValue<T>(this Object obj, String name)
        {
            Object retval = obj.GetPropValue(name);
            if (retval == null) { return default(T); }

            // throws InvalidCastException if types are incompatible
            return (T)retval;
        }
        public static object GetPropValue(this object obj, string property)
        {
            try
            { 
            return obj.GetType().GetProperty(property).GetValue(obj, null);
            }
            catch
            {
                return null;
            }
        }
        public static bool ValidateEmail(string email)
        {
            string expresion;
            expresion = "\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*";
            if (Regex.IsMatch(email, expresion))
            {
                if (Regex.Replace(email, expresion, string.Empty).Length == 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
       

        public static bool ValidateName(string Name)
        {
            string expresion;
            expresion = "^[a-z  A-Z]*$";
            if (Regex.IsMatch(Name, expresion))
            {
                if (Regex.Replace(Name, expresion, string.Empty).Length == 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
    }
}

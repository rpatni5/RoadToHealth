using RTH.Business.Objects;
using RTH.Business.Services;
using RTH.Windows.ViewModels.Common;
using RTH.Windows.ViewModels.Objects;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace RTH.Windows.ViewModels
{
    public class ResultViewModel : ViewModels.Common.ViewModelBase
    {

        public ResultViewModel()
        {
            PropertyChanged += OnSelectedDiseaseChanged;
            SelectedDisease = GlobalData.Default.ClickedHRA;
        }

        private void OnSelectedDiseaseChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "SelectedDisease" || e.PropertyName == "Animate" && Animate)
            {
                Reload();
            }
        }

        private void Reload()
        {
            LatestScoreSummary = null;
            Summary = null;
            ScoreSummaries = null;
            IsLoaded = false;
            LoadHealthAreasAsync();
        }

        public bool Animate
        {
            get { return GetValue(() => Animate); }
            set { SetValue(() => Animate, value); }
        }
        public override void Refresh()
        {
            //LatestScoreSummary = null;
            SelectedDisease = GlobalData.Default.ClickedHRA;
        }

        private void LoadHealthAreasAsync()
        {
            AsyncCall.Invoke(() =>
            {
                SetHeader();
                Summary = ResultService.GetSummaries(UserDetails._id, SelectedDisease.ID, UserDetails.AuthToken.access_token).data;
                ObservableCollection<ScoreSummary> summaries = ResultService.GetScoreSummaryDetails(UserDetails._id, SelectedDisease.ID, UserDetails.AuthToken.access_token);
                if (summaries != null && summaries.Any())
                {
                    ObservableCollection<ScoreSummary> temp = new ObservableCollection<ScoreSummary>();
                    int idx = 0;
                    foreach (ScoreSummary s in summaries)
                    {
                        if (temp.Count < 7)
                        {
                            if (temp.Count > 0 && temp[idx - 1].total_score.Split('.')[0] != s.total_score.Split('.')[0])
                            {
                                temp.Add(s);
                                idx += 1;
                            }
                            else if (temp.Count == 0)
                            {
                                temp.Add(s);
                                idx += 1;
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    ScoreSummaries = temp;
                    LatestScoreSummary = summaries[0];
                    if (Loaded != null)
                    {
                        IsLoaded = true;
                        Loaded();
                    }
                }
            });
        }
        public delegate void LoadedEventHandler();
        public event LoadedEventHandler Loaded;
        void SetHeader()
        {
            HeaderVisibility = true;
            HeaderTitle = SelectedDisease.Title;
            HeaderColor = SelectedDisease.BgColor;
            KeyString = SelectedDisease.KeyString;
            HeaderState = false;
            GlobalData.Default.LastVisitedDiseaseID = SelectedDisease.ID;
            FooterVisibility = true;
        }

        public ObservableCollection<QSummaries> Summary
        {
            get { return GetValue(() => Summary); }
            set { SetValue(() => Summary, value); }
        }
        public ScoreSummary LatestScoreSummary
        {
            get { return GetValue(() => LatestScoreSummary); }
            set { SetValue(() => LatestScoreSummary, value); }
        }
        public bool IsLoaded
        {
            get { return GetValue(() => IsLoaded); }
            private set { SetValue(() => IsLoaded, value); }
        }
        public ObservableCollection<ScoreSummary> ScoreSummaries
        {
            get { return GetValue(() => ScoreSummaries); }
            set { SetValue(() => ScoreSummaries, value); }
        }
    }
}

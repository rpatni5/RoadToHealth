using RTH.Business.Objects;
using RTH.Business.Services;
using RTH.Windows.ViewModels.Common;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace RTH.Windows.ViewModels
{
    public class ResultViewModel : ViewModels.Common.ViewModelBase
    {
        public ResultViewModel()
        {
            LoadHealthAreasAsync();

        }

        private async void LoadHealthAreasAsync()
        {
            await Task.Run(() =>
            {
                GlobalData.Default.LoaderVisibility = true;
                SetHeader();
                Summary = ResultService.GetSummaries(UserDetails._id, GlobalData.Default.ClickedHRA.ID, UserDetails.AuthToken.access_token).data;
                ObservableCollection<ScoreSummary> sc = ResultService.GetScoreSummaryDetails(UserDetails._id, GlobalData.Default.ClickedHRA.ID, UserDetails.AuthToken.access_token);
                if (sc != null && sc.Any())
                {
                    if (ScoreSummaries == null)
                        ScoreSummaries = new ObservableCollection<ScoreSummary>();
                    for (int i = 0; i <= 7; i++)
                    {
                        if (sc.Count > i)
                        {
                            ScoreSummaries.Add(sc[i]);
                        }
                        else break;
                    }
                    LatestScoreSummary = sc[0];
                }
                GlobalData.Default.LoaderVisibility = false;
            });


        }
        void SetHeader()
        {
            GlobalData.Default.HeaderVisibility = Visibility.Visible;
            GlobalData.Default.KeyString = GlobalData.Default.ClickedHRA.KeyString;
            GlobalData.Default.HeaderState = false;
            GlobalData.Default.HeaderColor = GlobalData.Default.ClickedHRA.BgColor;
            GlobalData.Default.HeaderTitle = GlobalData.Default.ClickedHRA.Title;
        }

        public ObservableCollection<QSummaries> Summary
        {
            get { return GetValue(() => Summary); }
            set { SetValue(() => Summary, value); }
        }
        public ScoreSummary LatestScoreSummary
        {
            get { return GetValue(() => LatestScoreSummary); }
            set { SetValue(() => LatestScoreSummary, value); }
        }

        public ObservableCollection<ScoreSummary> ScoreSummaries
        {
            get { return GetValue(() => ScoreSummaries); }
            set { SetValue(() => ScoreSummaries, value); }
        }
    }
}

using RTH.Windows.ViewModels;
using RTH.Windows.ViewModels.Common;
using RTH.Windows.Views.Helpers;
using RTH.Windows.Views.Objects;
using System;
using System.Collections.Generic;
using System.Windows;

namespace RTH.Windows.Views.UserControls
{
    /// <summary>
    /// Interaction logic for uc_insights.xaml
    /// </summary>
    public partial class InsightsView : ViewBase,ITutorialHost
    {
        public InsightsView()
        {
            InitializeComponent();            
        }
        public override void LoadViewModel()
        {
            this.ViewModel = ViewModelLocator.Get<InsightsViewModel>(refreshRequired: true);
            base.LoadViewModel();
        }

        private void Grid_Loaded(object sender, System.Windows.RoutedEventArgs e)
        {
            this.SetValue(ShowTutorialProperty, false);
        }

        #region Tutorials

        Dictionary<int, Tuple<string, FrameworkElement>> tutorialObjects;
        public void InitializeTutorials()
        {
            currentTutIndex = 0;            
            tutorialObjects = new Dictionary<int, Tuple<string, FrameworkElement>>
            {
                { 0,new Tuple<string, FrameworkElement>("InsightTabs", this.Users ) },
            };
        }
        public override void OnViewLoaded()
        {
            InitializeTutorials();
        }

        int currentTutIndex = 0;
        public override TutorialContent GetTutorials()
        {
            if (currentTutIndex == this.MaxTutorials)
            {
                ShowTutorial = false;
                return null;
            }
            var tuple = tutorialObjects[currentTutIndex++];
            Properties.Settings.Default.LastVisitedTutorial = tuple.Item1;
            Properties.Settings.Default.Save();
            return tuple.Item2.GetTutorial(this, tuple.Item1);
        }
        public int MaxTutorials
        {
            get
            {
                return tutorialObjects.Count;
            }
        }
        public int GetTutorialIndex()
        {
            return currentTutIndex;
        }

        public string GetTutorialText(string keyString)
        {
            return string.Empty;
        }

        #endregion Tutorials
    }
}

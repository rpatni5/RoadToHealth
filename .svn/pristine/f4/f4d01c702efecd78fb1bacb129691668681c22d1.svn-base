using RTH.Business.Objects.JSON;
using RTH.Windows.ViewModels;
using RTH.Windows.ViewModels.Common;
using RTH.Windows.Views.Controls;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace RTH.Windows.Views.UserControls
{
    /// <summary>
    /// Interaction logic for CoachChatView.xaml
    /// </summary>
    public partial class CoachChatView : ViewBase
    {
        public CoachChatView()
        {
            InitializeComponent();
        }
        CoachChatViewModel vm;
        public override void LoadViewModel()
        {
            vm = ViewModelLocator.Get<CoachChatViewModel>();
            ViewModel = vm;
            base.LoadViewModel();
        }
        List<string> lstChat;
        ConversationThread currentConversation;
        public void StartChat(Engagement engagement)
        {
            AsyncCall.Invoke(() =>
            {
                GetActivity(engagement._id);
            }, false);
        }

        private async void GetActivity(string _id)
        {
            AsyncCall.Invoke(() =>
            {
                currentConversation = vm.GetSpecificActivity(_id);
                if (currentConversation != null && !string.IsNullOrEmpty(currentConversation.engage_statement))
                {
                    FetchData(currentConversation.engage_statement);
                    DisplayChat();
                }
                else
                {
                    viewTyping.Visibility = Visibility.Collapsed;
                }
            }, false);
        }
        private void FetchData(string str)
        {
            lstChat = str.Split('\n').ToList();
        }
        private int chatWaitTime = 2000;
        int chatItrerator = 0;
        private void DisplayChat()
        {
            Dispatcher.Invoke(() =>
            {
                viewTyping.Visibility = Visibility.Visible;
                chatScroll.ScrollToBottom();
            });

            chatItrerator = 0;
            int count = lstChat.Count;
            for (chatItrerator = 0; chatItrerator < count;)
            {
                Thread.Sleep(chatWaitTime);
                if (chatWaitTime != 0)
                {
                    Dispatcher.Invoke(() =>
                    {
                        AddChatBlock();
                    });
                }
                chatWaitTime = 2000;
            }
        }
        private void AddChatBlock()
        {
            try
            {
                if (lstChat != null && chatItrerator < lstChat.Count)
                {
                    chatScroll.ScrollToBottom();
                    var chatBox = new ChatBox(lstChat[chatItrerator], false);
                    coachControl.Children.Add(chatBox);
                    chatItrerator++;
                    switch (currentConversation.chevron_link)
                    {
                        case 1:
                            GenerateLink(chatBox, lstChat[chatItrerator], currentConversation.chevron_obj);
                            break;
                        case 2:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                            chatBox.DataContext = currentConversation;
                            chatBox.MouseLeftButtonDown += ClientResponse;
                            break;
                    }
                    if (chatItrerator == lstChat.Count)
                    {
                        lstChat = null;
                        viewTyping.Visibility = Visibility.Collapsed;
                        SwipeOption();
                    }

                }
            }
            catch
            {

            }
        }

        private void GenerateLink(ChatBox label, string Content, string url)
        {
            StackPanel panel = new StackPanel();
            panel.Orientation = Orientation.Vertical;
            TextBlock text = new TextBlock();
            text.Text = Content;
            Label hyperText = new Label();
            Hyperlink link = new Hyperlink();
            link.Inlines.Add(url);
            hyperText.Content = link;
            panel.Children.Add(text);
            panel.Children.Add(hyperText);
            label.DataContext = currentConversation;
            label.MouseLeftButtonDown += ClientResponse;
        }

        private void ClientResponse(object sender, MouseButtonEventArgs e)
        {
            var label = sender as ChatBox;
            label.MouseLeftButtonDown -= ClientResponse;
        }

        private void SwipeOption()
        {
            if (currentConversation.option_list != null && currentConversation.option_list.Count > 0)
            {
                currentConversation.option_list.ForEach(c =>
                {
                    ChatResponseButton btn = new ChatResponseButton(c.option);
                    btn.DataContext = c;
                    btn.Content = c.option;
                    responseControl.Children.Add(btn);
                    chatScroll.ScrollToBottom();
                    btn.Click += btn_Click;
                });
            }
            else
            {
                EndOfChat();
            }

        }

        private void EndOfChat()
        {
            coachControl.Children.Add(new ChatBox("End of the Chat", false));
            ChatResponseButton btn = new ChatResponseButton("Back");
            btn.DataContext = null;
            responseControl.Children.Add(btn);
            chatScroll.ScrollToBottom();
            btn.Click += btn_Click;
        }
        private void btn_Click(object sender, RoutedEventArgs e)
        {
            var btn = sender as Button;
            btn.Click -= btn_Click;
            responseControl.Children.Clear();

            if (btn.DataContext == null)
            {
                App.SharedValues.WindowMain.BackCommand.Execute(null);
            }
            else
            {
                coachControl.Children.Add(new ChatBox(btn.Content.ToString(), true));
                var opt = btn.DataContext as OptionList;
                AsyncCall.Invoke(() =>
                {
                    switch (opt.additional_info)
                    {
                        case 0:
                            CoachingConversationResponse res = vm.SetSpecificEngagement(currentConversation._id, opt.option_id, "");
                            if (!string.IsNullOrEmpty(res.follow_on_activity_id))
                            {
                                GetActivity(res.follow_on_activity_id);
                            }
                            else
                            {

                            }
                            break;
                        case 1: break;
                    }
                    if (opt.additional_info == 0) { }
                }, false);
            }
        }
    }
}

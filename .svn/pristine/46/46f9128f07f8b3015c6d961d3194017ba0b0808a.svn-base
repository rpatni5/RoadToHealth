using RTH.Business.Objects;
using RTH.Business.Objects.JSON;
using RTH.Business.Services;
using RTH.Helpers.Exceptions;
using RTH.Helpers.Messaging;
using RTH.Windows.ViewModels.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace RTH.Windows.ViewModels
{
    public class TwitterAuthenticationViewModel : ViewModelBase
    {
        RelayCommand authenticateCommand;
        IDictionary<string, string> parameters;
        public TwitterAuthenticationViewModel(bool isPostTweet = false)
        {
            IsPostTweet = isPostTweet;
            Credentials = new TwitterCredentials();
            Credentials.OAuthToken = new TwitterAuthToken();
            Credentials.OAuthToken2 = new TwitterAuthToken();
            GetAuthTokenAndNavigateBrowser();
        }

        /// <summary>
        /// Property is used to define action that navigates to the ViewModel specified in the parameter
        /// </summary>
        public Action<string> NavigateToView { get { return GetValue(() => NavigateToView); } set { SetValue(() => NavigateToView, value); } }
        IDictionary<string, string> Parameters
        {
            get
            {
                if (parameters == null)
                {
                    parameters = new Dictionary<string, string>();
                    parameters.Add("oauth_consumer_key", Credentials.ConsumerKey);
                    if (Credentials.OAuthToken == null) Credentials.OAuthToken = new TwitterAuthToken();
                    parameters.Add("oauth_token", Credentials.OAuthToken.Token);
                }

                return parameters;
            }
        }
        public Uri NavigateToUri { get { return GetValue(() => NavigateToUri); } set { SetValue(() => NavigateToUri, value); } }
        private async void GetAuthTokenAndNavigateBrowser()
        {
            await Task.Run(() =>
            {
                GlobalData.Default.LoaderVisibility = true;
                Parameters.Add("oauth_callback", EncodeToProtectMultiByteCharUrls("oob"));
                Parameters.Remove("oauth_token");
                string oAuthToken = TwitterService.GetRequestToken(Credentials.ConsumerKey, Credentials.ConsumerSecret, Credentials.AccessToken, Parameters);
                if (string.IsNullOrEmpty(oAuthToken))
                {
                    GlobalData.Default.LoaderVisibility = false;
                    throw new Exception("Could not obtain Request token");
                }
                string[] tokens = oAuthToken.Split('&');
                Properties.Settings.Default.TwitterToken = Credentials.OAuthToken.Token = tokens[0].Split('=')[1];
                Properties.Settings.Default.TwitterTokenSecret = Credentials.OAuthToken.TokenSecret = tokens[1].Split('=')[1];
                Properties.Settings.Default.Save();
                NavigateToUri = new Uri("http://twitter.com/oauth/authenticate?oauth_token=" + Credentials.OAuthToken.Token);
                GlobalData.Default.LoaderVisibility = false;
            });
        }
        string EncodeToProtectMultiByteCharUrls(string callback)
        {
            return callback == "oob" ? "oob" : new Uri(callback).AbsoluteUri;
        }
        public RelayCommand AuthenticateCommand
        {
            get
            {
                return authenticateCommand ?? (authenticateCommand = new RelayCommand(
                    (o) =>
                    {
                        GetUserDetailsAsync();
                    },
                    (o) =>
                    {
                        return !string.IsNullOrEmpty(Credentials.Pin) && !string.IsNullOrWhiteSpace(Credentials.Pin);
                    }));
            }
        }

        public async void GetUserDetailsAsync()
        {
            await Task.Run(() =>
            {
                GlobalData.Default.LoaderVisibility = true;
                Parameters.Remove("oauth_verifier");
                Parameters.Remove("oauth_token");
                Parameters.Add("oauth_verifier", Credentials.Pin);
                Parameters.Add("oauth_token", Credentials.OAuthToken.Token);
                if (TwitterService.GetAccessToken(Credentials, Parameters))
                {
                    Properties.Settings.Default.TwitterToken2 = Credentials.OAuthToken2.Token;
                    Properties.Settings.Default.TwitterTokenSecret2 = Credentials.OAuthToken2.TokenSecret;
                    Properties.Settings.Default.Save();
                    Parameters.Remove("screen_name");
                    Parameters.Remove("oauth_token");
                    Parameters.Add("oauth_token", Credentials.OAuthToken2.Token);
                    Parameters.Add("screen_name", Credentials.OAuthToken2.ScreenName);
                    Parameters.Remove("oauth_verifier");
                    TwitterUser tUser = TwitterService.GetUserInfo(Credentials, Parameters);
                    if (tUser == null) throw new LoginException("Could not fetch Twitter user information");
                    User oUser = new User();
                    oUser.name = tUser.name;

                    if (NavigateToView == null) throw new ArgumentNullException("Navigate Action is required.");
                    if (IsPostTweet)
                    {
                        string contentUrl = "<a href='https://www.quealth.co/healthierworld.html';'>https://www.quealth.co/healthierworld.html';</a>";
                        string message = string.Concat("Quealth – Life Changer! I’ve just helped make the world healthier. Find out more…\n", contentUrl);
                        bool result = PostTweet(message);
                        if (result)
                            RTH.Helpers.Messaging.AppMessages.Send(ViewToken, new Message() { Type = MessageType.Message, Data = "Message Posted Successfully." });
                        else
                            RTH.Helpers.Messaging.AppMessages.Send(ViewToken, new Message() { Type = MessageType.Message, Data = "Message not Posted!" });
                        NavigateToView("MWHealthierView");
                    }
                    else
                    {
                        // Settings are to be saved only after ValidateSocialLogin goes successful. Currently the api is not working, so left as it is.
                        Properties.Settings.Default.SocialUserId = oUser._id = tUser.id_str;
                        Properties.Settings.Default.SocialType = oUser.type = "Twitter";
                        Properties.Settings.Default.Save();
                        UserDetails = oUser;
                        oUser = this.ValidateSocialLogin(oUser._id, oUser.type);
                        Parameters.Remove("screen_name");
                        if (!string.IsNullOrEmpty(oUser.message) && string.IsNullOrEmpty(oUser._id))
                        {
                            NavigateToView("FBUserRegistrationView");
                        }
                        else
                        {
                            UserDetails = oUser;
                            NavigateToView("DashboardView");
                        }
                    }
                }
                GlobalData.Default.LoaderVisibility = false;
            });
        }


        public TwitterCredentials Credentials { get { return GetValue(() => Credentials); } set { SetValue(() => Credentials, value); } }
        public bool IsPostTweet { get { return GetValue(() => IsPostTweet); } set { SetValue(() => IsPostTweet, value); } }

        public bool PostTweet(string message)
        {
            string result = TwitterService.PostTweet(message, Credentials, Parameters);
            if (!string.IsNullOrEmpty(result) && result.ToLower().Contains("forbidden")) return false;
            return true;
        }
    }
}
